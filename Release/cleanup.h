//copyright joshuah.rainstar@gmail.com 2024 joshuah rainstar
//licensed under the free as in free toothpaste license

#pragma once
#include <complex>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <array>
#define WIN32_LEAN_AND_MEAN		// exclude some windows headers


# define M_PI           3.14159265358979323846  /* pi */
#define DF double //sufficient precision for all intents and purposes



class Filter
{
private:
	using dfloat = double; //float/double 
	using dint = int_fast32_t; //compile-time int / int_fast32_t switching


	static constexpr std::array<dfloat, 512> logistic_window = { 0.00000000000000, 0.00002524937370, 0.00010099361700, 0.00022722112400, 0.00040391257300, 0.00063104094300, 0.00090857151200, 0.00123646188000, 0.00161466197000, 0.00204311406000, 0.00252175277000, 0.00305050510000, 0.00362929044000, 0.00425802059000, 0.00493659976000, 0.00566492464000, 0.00644288435000, 0.00727036053000, 0.00814722732000, 0.00907335139000, 0.01004859200000, 0.01107280090000, 0.01214582270000, 0.01326749430000, 0.01443764560000, 0.01565609900000, 0.01692266970000, 0.01823716570000, 0.01959938780000, 0.02100912940000, 0.02246617720000, 0.02397031050000, 0.02552130150000, 0.02711891550000, 0.02876291090000, 0.03045303900000, 0.03218904420000, 0.03397066410000, 0.03579762940000, 0.03766966400000, 0.03958648530000, 0.04154780360000, 0.04355332280000, 0.04560274030000, 0.04769574660000, 0.04983202600000, 0.05201125610000, 0.05423310810000, 0.05649724710000, 0.05880333150000, 0.06115101360000, 0.06353993960000, 0.06596974930000, 0.06844007650000, 0.07095054880000, 0.07350078800000, 0.07609040990000, 0.07871902420000, 0.08138623490000, 0.08409164010000, 0.08683483240000, 0.08961539850000, 0.09243291960000, 0.09528697110000, 0.09817712320000, 0.10110294100000, 0.10406398200000, 0.10705980300000, 0.11008995000000, 0.11315396800000, 0.11625139400000, 0.11938176300000, 0.12254460200000, 0.12573943500000, 0.12896578000000, 0.13222315100000, 0.13551105700000, 0.13882900100000, 0.14217648500000, 0.14555300200000, 0.14895804300000, 0.15239109500000, 0.15585164000000, 0.15933915400000, 0.16285311300000, 0.16639298500000, 0.16995823500000, 0.17354832500000, 0.17716271300000, 0.18080085200000, 0.18446219200000, 0.18814618000000, 0.19185225900000, 0.19557986700000, 0.19932844100000, 0.20309741300000, 0.20688621200000, 0.21069426600000, 0.21452099600000, 0.21836582300000, 0.22222816400000, 0.22610743300000, 0.23000304200000, 0.23391440000000, 0.23784091300000, 0.24178198500000, 0.24573701600000, 0.24970540700000, 0.25368655500000, 0.25767985300000, 0.26168469400000, 0.26570047000000, 0.26972656800000, 0.27376237700000, 0.27780728100000, 0.28186066400000, 0.28592190800000, 0.28999039400000, 0.29406550300000, 0.29814661100000, 0.30223309600000, 0.30632433500000, 0.31041970200000, 0.31451857200000, 0.31862031900000, 0.32272431600000, 0.32682993400000, 0.33093654700000, 0.33504352600000, 0.33915024600000, 0.34325608600000, 0.34736042700000, 0.35146264800000, 0.35556212900000, 0.35965825100000, 0.36375039800000, 0.36783795000000, 0.37192029200000, 0.37599680800000, 0.38006688300000, 0.38412990500000, 0.38818526000000, 0.39223233900000, 0.39627053100000, 0.40029923000000, 0.40431782800000, 0.40832572100000, 0.41232230600000, 0.41630698200000, 0.42027915000000, 0.42423821300000, 0.42818357500000, 0.43211464500000, 0.43603083100000, 0.43993154600000, 0.44381620300000, 0.44768422000000, 0.45153501500000, 0.45536801100000, 0.45918263200000, 0.46297830600000, 0.46675446400000, 0.47051053900000, 0.47424596700000, 0.47796018900000, 0.48165264700000, 0.48532278800000, 0.48897006000000, 0.49259391800000, 0.49619381700000, 0.49976921800000, 0.50331958400000, 0.50684438400000, 0.51034308800000, 0.51381517200000, 0.51726011600000, 0.52067740100000, 0.52406651600000, 0.52742695200000, 0.53075820500000, 0.53405977400000, 0.53733116500000, 0.54057188600000, 0.54378145000000, 0.54695937600000, 0.55010518500000, 0.55321840500000, 0.55629856900000, 0.55934521200000, 0.56235787800000, 0.56533611100000, 0.56827946500000, 0.57118749500000, 0.57405976400000, 0.57689584000000, 0.57969529300000, 0.58245770300000, 0.58518265200000, 0.58786972800000, 0.59051852700000, 0.59312864700000, 0.59569969300000, 0.59823127800000, 0.60072301600000, 0.60317453200000, 0.60558545200000, 0.60795541100000, 0.61028405000000, 0.61257101400000, 0.61481595600000, 0.61701853400000, 0.61917841300000, 0.62129526200000, 0.62336876000000, 0.62539858900000, 0.62738443900000, 0.62932600600000, 0.63122299300000, 0.63307510900000, 0.63488206800000, 0.63664359500000, 0.63835941600000, 0.64002926900000, 0.64165289500000, 0.64323004300000, 0.64476046900000, 0.64624393700000, 0.64768021500000, 0.64906908000000, 0.65041031700000, 0.65170371500000, 0.65294907200000, 0.65414619400000, 0.65529489300000, 0.65639498700000, 0.65744630300000, 0.65844867400000, 0.65940194300000, 0.66030595600000, 0.66116057000000, 0.66196564700000, 0.66272105900000, 0.66342668300000, 0.66408240400000, 0.66468811500000, 0.66524371700000, 0.66574911700000, 0.66620423100000, 0.66660898300000, 0.66696330200000, 0.66726712800000, 0.66752040600000, 0.66772309000000, 0.66787514100000, 0.66797652900000, 0.66802723000000, 0.66802723000000, 0.66797652900000, 0.66787514100000, 0.66772309000000, 0.66752040600000, 0.66726712800000, 0.66696330200000, 0.66660898300000, 0.66620423100000, 0.66574911700000, 0.66524371700000, 0.66468811500000, 0.66408240400000, 0.66342668300000, 0.66272105900000, 0.66196564700000, 0.66116057000000, 0.66030595600000, 0.65940194300000, 0.65844867400000, 0.65744630300000, 0.65639498700000, 0.65529489300000, 0.65414619400000, 0.65294907200000, 0.65170371500000, 0.65041031700000, 0.64906908000000, 0.64768021500000, 0.64624393700000, 0.64476046900000, 0.64323004300000, 0.64165289500000, 0.64002926900000, 0.63835941600000, 0.63664359500000, 0.63488206800000, 0.63307510900000, 0.63122299300000, 0.62932600600000, 0.62738443900000, 0.62539858900000, 0.62336876000000, 0.62129526200000, 0.61917841300000, 0.61701853400000, 0.61481595600000, 0.61257101400000, 0.61028405000000, 0.60795541100000, 0.60558545200000, 0.60317453200000, 0.60072301600000, 0.59823127800000, 0.59569969300000, 0.59312864700000, 0.59051852700000, 0.58786972800000, 0.58518265200000, 0.58245770300000, 0.57969529300000, 0.57689584000000, 0.57405976400000, 0.57118749500000, 0.56827946500000, 0.56533611100000, 0.56235787800000, 0.55934521200000, 0.55629856900000, 0.55321840500000, 0.55010518500000, 0.54695937600000, 0.54378145000000, 0.54057188600000, 0.53733116500000, 0.53405977400000, 0.53075820500000, 0.52742695200000, 0.52406651600000, 0.52067740100000, 0.51726011600000, 0.51381517200000, 0.51034308800000, 0.50684438400000, 0.50331958400000, 0.49976921800000, 0.49619381700000, 0.49259391800000, 0.48897006000000, 0.48532278800000, 0.48165264700000, 0.47796018900000, 0.47424596700000, 0.47051053900000, 0.46675446400000, 0.46297830600000, 0.45918263200000, 0.45536801100000, 0.45153501500000, 0.44768422000000, 0.44381620300000, 0.43993154600000, 0.43603083100000, 0.43211464500000, 0.42818357500000, 0.42423821300000, 0.42027915000000, 0.41630698200000, 0.41232230600000, 0.40832572100000, 0.40431782800000, 0.40029923000000, 0.39627053100000, 0.39223233900000, 0.38818526000000, 0.38412990500000, 0.38006688300000, 0.37599680800000, 0.37192029200000, 0.36783795000000, 0.36375039800000, 0.35965825100000, 0.35556212900000, 0.35146264800000, 0.34736042700000, 0.34325608600000, 0.33915024600000, 0.33504352600000, 0.33093654700000, 0.32682993400000, 0.32272431600000, 0.31862031900000, 0.31451857200000, 0.31041970200000, 0.30632433500000, 0.30223309600000, 0.29814661100000, 0.29406550300000, 0.28999039400000, 0.28592190800000, 0.28186066400000, 0.27780728100000, 0.27376237700000, 0.26972656800000, 0.26570047000000, 0.26168469400000, 0.25767985300000, 0.25368655500000, 0.24970540700000, 0.24573701600000, 0.24178198500000, 0.23784091300000, 0.23391440000000, 0.23000304200000, 0.22610743300000, 0.22222816400000, 0.21836582300000, 0.21452099600000, 0.21069426600000, 0.20688621200000, 0.20309741300000, 0.19932844100000, 0.19557986700000, 0.19185225900000, 0.18814618000000, 0.18446219200000, 0.18080085200000, 0.17716271300000, 0.17354832500000, 0.16995823500000, 0.16639298500000, 0.16285311300000, 0.15933915400000, 0.15585164000000, 0.15239109500000, 0.14895804300000, 0.14555300200000, 0.14217648500000, 0.13882900100000, 0.13551105700000, 0.13222315100000, 0.12896578000000, 0.12573943500000, 0.12254460200000, 0.11938176300000, 0.11625139400000, 0.11315396800000, 0.11008995000000, 0.10705980300000, 0.10406398200000, 0.10110294100000, 0.09817712320000, 0.09528697110000, 0.09243291960000, 0.08961539850000, 0.08683483240000, 0.08409164010000, 0.08138623490000, 0.07871902420000, 0.07609040990000, 0.07350078800000, 0.07095054880000, 0.06844007650000, 0.06596974930000, 0.06353993960000, 0.06115101360000, 0.05880333150000, 0.05649724710000, 0.05423310810000, 0.05201125610000, 0.04983202600000, 0.04769574660000, 0.04560274030000, 0.04355332280000, 0.04154780360000, 0.03958648530000, 0.03766966400000, 0.03579762940000, 0.03397066410000, 0.03218904420000, 0.03045303900000, 0.02876291090000, 0.02711891550000, 0.02552130150000, 0.02397031050000, 0.02246617720000, 0.02100912940000, 0.01959938780000, 0.01823716570000, 0.01692266970000, 0.01565609900000, 0.01443764560000, 0.01326749430000, 0.01214582270000, 0.01107280090000, 0.01004859200000, 0.00907335139000, 0.00814722732000, 0.00727036053000, 0.00644288435000, 0.00566492464000, 0.00493659976000, 0.00425802059000, 0.00362929044000, 0.00305050510000, 0.00252175277000, 0.00204311406000, 0.00161466197000, 0.00123646188000, 0.00090857151200, 0.00063104094300, 0.00040391257300, 0.00022722112400, 0.00010099361700, 0.00002524937370, 0.00000000000000 };
	static constexpr std::array<dfloat, 512> hann_window = { 0.00000000000000, 0.00003779657730, 0.00015118059500, 0.00034013491000, 0.00060463095700, 0.00094462874600, 0.00136007687000, 0.00185091253000, 0.00241706151000, 0.00305843822000, 0.00377494569000, 0.00456647559000, 0.00543290826000, 0.00637411270000, 0.00738994662000, 0.00848025644000, 0.00964487731000, 0.01088363320000, 0.01219633670000, 0.01358278950000, 0.01504278190000, 0.01657609320000, 0.01818249160000, 0.01986173420000, 0.02161356710000, 0.02343772550000, 0.02533393360000, 0.02730190470000, 0.02934134120000, 0.03145193500000, 0.03363336670000, 0.03588530680000, 0.03820741460000, 0.04059933910000, 0.04306071870000, 0.04559118130000, 0.04819034430000, 0.05085781470000, 0.05359318930000, 0.05639605440000, 0.05926598640000, 0.06220255140000, 0.06520530530000, 0.06827379430000, 0.07140755430000, 0.07460611160000, 0.07786898270000, 0.08119567420000, 0.08458568320000, 0.08803849710000, 0.09155359400000, 0.09513044240000, 0.09876850150000, 0.10246722100000, 0.10622604300000, 0.11004439700000, 0.11392170800000, 0.11785738800000, 0.12185084300000, 0.12590146900000, 0.13000865400000, 0.13417177600000, 0.13839020600000, 0.14266330700000, 0.14699043200000, 0.15137092800000, 0.15580413100000, 0.16028937200000, 0.16482597300000, 0.16941324700000, 0.17405050200000, 0.17873703600000, 0.18347214000000, 0.18825509900000, 0.19308519000000, 0.19796168100000, 0.20288383700000, 0.20785091300000, 0.21286215800000, 0.21791681400000, 0.22301411700000, 0.22815329700000, 0.23333357600000, 0.23855417100000, 0.24381429400000, 0.24911314800000, 0.25444993300000, 0.25982384200000, 0.26523406200000, 0.27067977500000, 0.27616015900000, 0.28167438400000, 0.28722161700000, 0.29280101900000, 0.29841174700000, 0.30405295200000, 0.30972378200000, 0.31542337800000, 0.32115088100000, 0.32690542200000, 0.33268613400000, 0.33849214100000, 0.34432256500000, 0.35017652600000, 0.35605313800000, 0.36195151300000, 0.36787076000000, 0.37380998200000, 0.37976828200000, 0.38574476000000, 0.39173851100000, 0.39774863100000, 0.40377420900000, 0.40981433500000, 0.41586809600000, 0.42193457700000, 0.42801286000000, 0.43410202700000, 0.44020115600000, 0.44630932700000, 0.45242561400000, 0.45854909400000, 0.46467884100000, 0.47081392800000, 0.47695342800000, 0.48309641200000, 0.48924195100000, 0.49538911700000, 0.50153698000000, 0.50768461100000, 0.51383108000000, 0.51997545800000, 0.52611681500000, 0.53225422500000, 0.53838675800000, 0.54451348700000, 0.55063348600000, 0.55674583100000, 0.56284959600000, 0.56894385900000, 0.57502769900000, 0.58110019600000, 0.58716043100000, 0.59320748900000, 0.59924045600000, 0.60525841800000, 0.61126046700000, 0.61724569500000, 0.62321319700000, 0.62916207000000, 0.63509141700000, 0.64100033900000, 0.64688794400000, 0.65275334100000, 0.65859564400000, 0.66441397000000, 0.67020743900000, 0.67597517400000, 0.68171630500000, 0.68742996200000, 0.69311528300000, 0.69877140700000, 0.70439748000000, 0.70999265100000, 0.71555607300000, 0.72108690700000, 0.72658431500000, 0.73204746700000, 0.73747553600000, 0.74286770200000, 0.74822315000000, 0.75354107000000, 0.75882065900000, 0.76406111700000, 0.76926165200000, 0.77442147900000, 0.77953981700000, 0.78461589300000, 0.78964893800000, 0.79463819300000, 0.79958290200000, 0.80448231900000, 0.80933570200000, 0.81414231700000, 0.81890143900000, 0.82361234700000, 0.82827432900000, 0.83288668100000, 0.83744870500000, 0.84195971100000, 0.84641901700000, 0.85082595000000, 0.85517984300000, 0.85948003700000, 0.86372588300000, 0.86791673800000, 0.87205197000000, 0.87613095200000, 0.88015306900000, 0.88411771100000, 0.88802428100000, 0.89187218600000, 0.89566084500000, 0.89938968600000, 0.90305814500000, 0.90666566700000, 0.91021170700000, 0.91369572800000, 0.91711720400000, 0.92047561800000, 0.92377046100000, 0.92700123700000, 0.93016745500000, 0.93326863800000, 0.93630431700000, 0.93927403300000, 0.94217733600000, 0.94501378800000, 0.94778296000000, 0.95048443400000, 0.95311780000000, 0.95568266200000, 0.95817863000000, 0.96060532800000, 0.96296238900000, 0.96524945600000, 0.96746618400000, 0.96961223700000, 0.97168729100000, 0.97369103300000, 0.97562315900000, 0.97748337700000, 0.97927140700000, 0.98098697700000, 0.98262982900000, 0.98419971300000, 0.98569639300000, 0.98711964300000, 0.98846924600000, 0.98974500000000, 0.99094671100000, 0.99207419800000, 0.99312729000000, 0.99410582700000, 0.99500966300000, 0.99583866000000, 0.99659269300000, 0.99727164800000, 0.99787542200000, 0.99840392400000, 0.99885707500000, 0.99923480500000, 0.99953705800000, 0.99976378700000, 0.99991495900000, 0.99999055100000, 0.99999055100000, 0.99991495900000, 0.99976378700000, 0.99953705800000, 0.99923480500000, 0.99885707500000, 0.99840392400000, 0.99787542200000, 0.99727164800000, 0.99659269300000, 0.99583866000000, 0.99500966300000, 0.99410582700000, 0.99312729000000, 0.99207419800000, 0.99094671100000, 0.98974500000000, 0.98846924600000, 0.98711964300000, 0.98569639300000, 0.98419971300000, 0.98262982900000, 0.98098697700000, 0.97927140700000, 0.97748337700000, 0.97562315900000, 0.97369103300000, 0.97168729100000, 0.96961223700000, 0.96746618400000, 0.96524945600000, 0.96296238900000, 0.96060532800000, 0.95817863000000, 0.95568266200000, 0.95311780000000, 0.95048443400000, 0.94778296000000, 0.94501378800000, 0.94217733600000, 0.93927403300000, 0.93630431700000, 0.93326863800000, 0.93016745500000, 0.92700123700000, 0.92377046100000, 0.92047561800000, 0.91711720400000, 0.91369572800000, 0.91021170700000, 0.90666566700000, 0.90305814500000, 0.89938968600000, 0.89566084500000, 0.89187218600000, 0.88802428100000, 0.88411771100000, 0.88015306900000, 0.87613095200000, 0.87205197000000, 0.86791673800000, 0.86372588300000, 0.85948003700000, 0.85517984300000, 0.85082595000000, 0.84641901700000, 0.84195971100000, 0.83744870500000, 0.83288668100000, 0.82827432900000, 0.82361234700000, 0.81890143900000, 0.81414231700000, 0.80933570200000, 0.80448231900000, 0.79958290200000, 0.79463819300000, 0.78964893800000, 0.78461589300000, 0.77953981700000, 0.77442147900000, 0.76926165200000, 0.76406111700000, 0.75882065900000, 0.75354107000000, 0.74822315000000, 0.74286770200000, 0.73747553600000, 0.73204746700000, 0.72658431500000, 0.72108690700000, 0.71555607300000, 0.70999265100000, 0.70439748000000, 0.69877140700000, 0.69311528300000, 0.68742996200000, 0.68171630500000, 0.67597517400000, 0.67020743900000, 0.66441397000000, 0.65859564400000, 0.65275334100000, 0.64688794400000, 0.64100033900000, 0.63509141700000, 0.62916207000000, 0.62321319700000, 0.61724569500000, 0.61126046700000, 0.60525841800000, 0.59924045600000, 0.59320748900000, 0.58716043100000, 0.58110019600000, 0.57502769900000, 0.56894385900000, 0.56284959600000, 0.55674583100000, 0.55063348600000, 0.54451348700000, 0.53838675800000, 0.53225422500000, 0.52611681500000, 0.51997545800000, 0.51383108000000, 0.50768461100000, 0.50153698000000, 0.49538911700000, 0.48924195100000, 0.48309641200000, 0.47695342800000, 0.47081392800000, 0.46467884100000, 0.45854909400000, 0.45242561400000, 0.44630932700000, 0.44020115600000, 0.43410202700000, 0.42801286000000, 0.42193457700000, 0.41586809600000, 0.40981433500000, 0.40377420900000, 0.39774863100000, 0.39173851100000, 0.38574476000000, 0.37976828200000, 0.37380998200000, 0.36787076000000, 0.36195151300000, 0.35605313800000, 0.35017652600000, 0.34432256500000, 0.33849214100000, 0.33268613400000, 0.32690542200000, 0.32115088100000, 0.31542337800000, 0.30972378200000, 0.30405295200000, 0.29841174700000, 0.29280101900000, 0.28722161700000, 0.28167438400000, 0.27616015900000, 0.27067977500000, 0.26523406200000, 0.25982384200000, 0.25444993300000, 0.24911314800000, 0.24381429400000, 0.23855417100000, 0.23333357600000, 0.22815329700000, 0.22301411700000, 0.21791681400000, 0.21286215800000, 0.20785091300000, 0.20288383700000, 0.19796168100000, 0.19308519000000, 0.18825509900000, 0.18347214000000, 0.17873703600000, 0.17405050200000, 0.16941324700000, 0.16482597300000, 0.16028937200000, 0.15580413100000, 0.15137092800000, 0.14699043200000, 0.14266330700000, 0.13839020600000, 0.13417177600000, 0.13000865400000, 0.12590146900000, 0.12185084300000, 0.11785738800000, 0.11392170800000, 0.11004439700000, 0.10622604300000, 0.10246722100000, 0.09876850150000, 0.09513044240000, 0.09155359400000, 0.08803849710000, 0.08458568320000, 0.08119567420000, 0.07786898270000, 0.07460611160000, 0.07140755430000, 0.06827379430000, 0.06520530530000, 0.06220255140000, 0.05926598640000, 0.05639605440000, 0.05359318930000, 0.05085781470000, 0.04819034430000, 0.04559118130000, 0.04306071870000, 0.04059933910000, 0.03820741460000, 0.03588530680000, 0.03363336670000, 0.03145193500000, 0.02934134120000, 0.02730190470000, 0.02533393360000, 0.02343772550000, 0.02161356710000, 0.01986173420000, 0.01818249160000, 0.01657609320000, 0.01504278190000, 0.01358278950000, 0.01219633670000, 0.01088363320000, 0.00964487731000, 0.00848025644000, 0.00738994662000, 0.00637411270000, 0.00543290826000, 0.00456647559000, 0.00377494569000, 0.00305843822000, 0.00241706151000, 0.00185091253000, 0.00136007687000, 0.00094462874600, 0.00060463095700, 0.00034013491000, 0.00015118059500, 0.00003779657730, 0.00000000000000 };
	static constexpr std::array<dfloat, 512> synthesis_window = { 0.00000000000000, 0.00002524937370, 0.00010099361700, 0.00022722112400, 0.00040391257300, 0.00063104094300, 0.00090857151200, 0.00123646188000, 0.00161466197000, 0.00204311406000, 0.00252175277000, 0.00305050510000, 0.00362929044000, 0.00425802059000, 0.00493659976000, 0.00566492464000, 0.00644288435000, 0.00727036053000, 0.00814722732000, 0.00907335139000, 0.01004859200000, 0.01107280090000, 0.01214582270000, 0.01326749430000, 0.01443764560000, 0.01565609900000, 0.01692266970000, 0.01823716570000, 0.01959938780000, 0.02100912940000, 0.02246617720000, 0.02397031050000, 0.02552130150000, 0.02711891550000, 0.02876291090000, 0.03045303900000, 0.03218904420000, 0.03397066410000, 0.03579762940000, 0.03766966400000, 0.03958648530000, 0.04154780360000, 0.04355332280000, 0.04560274030000, 0.04769574660000, 0.04983202600000, 0.05201125610000, 0.05423310810000, 0.05649724710000, 0.05880333150000, 0.06115101360000, 0.06353993960000, 0.06596974930000, 0.06844007650000, 0.07095054880000, 0.07350078800000, 0.07609040990000, 0.07871902420000, 0.08138623490000, 0.08409164010000, 0.08683483240000, 0.08961539850000, 0.09243291960000, 0.09528697110000, 0.09817712320000, 0.10110294100000, 0.10406398200000, 0.10705980300000, 0.11008995000000, 0.11315396800000, 0.11625139400000, 0.11938176300000, 0.12254460200000, 0.12573943500000, 0.12896578000000, 0.13222315100000, 0.13551105700000, 0.13882900100000, 0.14217648500000, 0.14555300200000, 0.14895804300000, 0.15239109500000, 0.15585164000000, 0.15933915400000, 0.16285311300000, 0.16639298500000, 0.16995823500000, 0.17354832500000, 0.17716271300000, 0.18080085200000, 0.18446219200000, 0.18814618000000, 0.19185225900000, 0.19557986700000, 0.19932844100000, 0.20309741300000, 0.20688621200000, 0.21069426600000, 0.21452099600000, 0.21836582300000, 0.22222816400000, 0.22610743300000, 0.23000304200000, 0.23391440000000, 0.23784091300000, 0.24178198500000, 0.24573701600000, 0.24970540700000, 0.25368655500000, 0.25767985300000, 0.26168469400000, 0.26570047000000, 0.26972656800000, 0.27376237700000, 0.27780728100000, 0.28186066400000, 0.28592190800000, 0.28999039400000, 0.29406550300000, 0.29814661100000, 0.30223309600000, 0.30632433500000, 0.31041970200000, 0.31451857200000, 0.31862031900000, 0.32272431600000, 0.32682993400000, 0.33093654700000, 0.33504352600000, 0.33915024600000, 0.34325608600000, 0.34736042700000, 0.35146264800000, 0.35556212900000, 0.35965825100000, 0.36375039800000, 0.36783795000000, 0.37192029200000, 0.37599680800000, 0.38006688300000, 0.38412990500000, 0.38818526000000, 0.39223233900000, 0.39627053100000, 0.40029923000000, 0.40431782800000, 0.40832572100000, 0.41232230600000, 0.41630698200000, 0.42027915000000, 0.42423821300000, 0.42818357500000, 0.43211464500000, 0.43603083100000, 0.43993154600000, 0.44381620300000, 0.44768422000000, 0.45153501500000, 0.45536801100000, 0.45918263200000, 0.46297830600000, 0.46675446400000, 0.47051053900000, 0.47424596700000, 0.47796018900000, 0.48165264700000, 0.48532278800000, 0.48897006000000, 0.49259391800000, 0.49619381700000, 0.49976921800000, 0.50331958400000, 0.50684438400000, 0.51034308800000, 0.51381517200000, 0.51726011600000, 0.52067740100000, 0.52406651600000, 0.52742695200000, 0.53075820500000, 0.53405977400000, 0.53733116500000, 0.54057188600000, 0.54378145000000, 0.54695937600000, 0.55010518500000, 0.55321840500000, 0.55629856900000, 0.55934521200000, 0.56235787800000, 0.56533611100000, 0.56827946500000, 0.57118749500000, 0.57405976400000, 0.57689584000000, 0.57969529300000, 0.58245770300000, 0.58518265200000, 0.58786972800000, 0.59051852700000, 0.59312864700000, 0.59569969300000, 0.59823127800000, 0.60072301600000, 0.60317453200000, 0.60558545200000, 0.60795541100000, 0.61028405000000, 0.61257101400000, 0.61481595600000, 0.61701853400000, 0.61917841300000, 0.62129526200000, 0.62336876000000, 0.62539858900000, 0.62738443900000, 0.62932600600000, 0.63122299300000, 0.63307510900000, 0.63488206800000, 0.63664359500000, 0.63835941600000, 0.64002926900000, 0.64165289500000, 0.64323004300000, 0.64476046900000, 0.64624393700000, 0.64768021500000, 0.64906908000000, 0.65041031700000, 0.65170371500000, 0.65294907200000, 0.65414619400000, 0.65529489300000, 0.65639498700000, 0.65744630300000, 0.65844867400000, 0.65940194300000, 0.66030595600000, 0.66116057000000, 0.66196564700000, 0.66272105900000, 0.66342668300000, 0.66408240400000, 0.66468811500000, 0.66524371700000, 0.66574911700000, 0.66620423100000, 0.66660898300000, 0.66696330200000, 0.66726712800000, 0.66752040600000, 0.66772309000000, 0.66787514100000, 0.66797652900000, 0.66802723000000, 0.66802723000000, 0.66797652900000, 0.66787514100000, 0.66772309000000, 0.66752040600000, 0.66726712800000, 0.66696330200000, 0.66660898300000, 0.66620423100000, 0.66574911700000, 0.66524371700000, 0.66468811500000, 0.66408240400000, 0.66342668300000, 0.66272105900000, 0.66196564700000, 0.66116057000000, 0.66030595600000, 0.65940194300000, 0.65844867400000, 0.65744630300000, 0.65639498700000, 0.65529489300000, 0.65414619400000, 0.65294907200000, 0.65170371500000, 0.65041031700000, 0.64906908000000, 0.64768021500000, 0.64624393700000, 0.64476046900000, 0.64323004300000, 0.64165289500000, 0.64002926900000, 0.63835941600000, 0.63664359500000, 0.63488206800000, 0.63307510900000, 0.63122299300000, 0.62932600600000, 0.62738443900000, 0.62539858900000, 0.62336876000000, 0.62129526200000, 0.61917841300000, 0.61701853400000, 0.61481595600000, 0.61257101400000, 0.61028405000000, 0.60795541100000, 0.60558545200000, 0.60317453200000, 0.60072301600000, 0.59823127800000, 0.59569969300000, 0.59312864700000, 0.59051852700000, 0.58786972800000, 0.58518265200000, 0.58245770300000, 0.57969529300000, 0.57689584000000, 0.57405976400000, 0.57118749500000, 0.56827946500000, 0.56533611100000, 0.56235787800000, 0.55934521200000, 0.55629856900000, 0.55321840500000, 0.55010518500000, 0.54695937600000, 0.54378145000000, 0.54057188600000, 0.53733116500000, 0.53405977400000, 0.53075820500000, 0.52742695200000, 0.52406651600000, 0.52067740100000, 0.51726011600000, 0.51381517200000, 0.51034308800000, 0.50684438400000, 0.50331958400000, 0.49976921800000, 0.49619381700000, 0.49259391800000, 0.48897006000000, 0.48532278800000, 0.48165264700000, 0.47796018900000, 0.47424596700000, 0.47051053900000, 0.46675446400000, 0.46297830600000, 0.45918263200000, 0.45536801100000, 0.45153501500000, 0.44768422000000, 0.44381620300000, 0.43993154600000, 0.43603083100000, 0.43211464500000, 0.42818357500000, 0.42423821300000, 0.42027915000000, 0.41630698200000, 0.41232230600000, 0.40832572100000, 0.40431782800000, 0.40029923000000, 0.39627053100000, 0.39223233900000, 0.38818526000000, 0.38412990500000, 0.38006688300000, 0.37599680800000, 0.37192029200000, 0.36783795000000, 0.36375039800000, 0.35965825100000, 0.35556212900000, 0.35146264800000, 0.34736042700000, 0.34325608600000, 0.33915024600000, 0.33504352600000, 0.33093654700000, 0.32682993400000, 0.32272431600000, 0.31862031900000, 0.31451857200000, 0.31041970200000, 0.30632433500000, 0.30223309600000, 0.29814661100000, 0.29406550300000, 0.28999039400000, 0.28592190800000, 0.28186066400000, 0.27780728100000, 0.27376237700000, 0.26972656800000, 0.26570047000000, 0.26168469400000, 0.25767985300000, 0.25368655500000, 0.24970540700000, 0.24573701600000, 0.24178198500000, 0.23784091300000, 0.23391440000000, 0.23000304200000, 0.22610743300000, 0.22222816400000, 0.21836582300000, 0.21452099600000, 0.21069426600000, 0.20688621200000, 0.20309741300000, 0.19932844100000, 0.19557986700000, 0.19185225900000, 0.18814618000000, 0.18446219200000, 0.18080085200000, 0.17716271300000, 0.17354832500000, 0.16995823500000, 0.16639298500000, 0.16285311300000, 0.15933915400000, 0.15585164000000, 0.15239109500000, 0.14895804300000, 0.14555300200000, 0.14217648500000, 0.13882900100000, 0.13551105700000, 0.13222315100000, 0.12896578000000, 0.12573943500000, 0.12254460200000, 0.11938176300000, 0.11625139400000, 0.11315396800000, 0.11008995000000, 0.10705980300000, 0.10406398200000, 0.10110294100000, 0.09817712320000, 0.09528697110000, 0.09243291960000, 0.08961539850000, 0.08683483240000, 0.08409164010000, 0.08138623490000, 0.07871902420000, 0.07609040990000, 0.07350078800000, 0.07095054880000, 0.06844007650000, 0.06596974930000, 0.06353993960000, 0.06115101360000, 0.05880333150000, 0.05649724710000, 0.05423310810000, 0.05201125610000, 0.04983202600000, 0.04769574660000, 0.04560274030000, 0.04355332280000, 0.04154780360000, 0.03958648530000, 0.03766966400000, 0.03579762940000, 0.03397066410000, 0.03218904420000, 0.03045303900000, 0.02876291090000, 0.02711891550000, 0.02552130150000, 0.02397031050000, 0.02246617720000, 0.02100912940000, 0.01959938780000, 0.01823716570000, 0.01692266970000, 0.01565609900000, 0.01443764560000, 0.01326749430000, 0.01214582270000, 0.01107280090000, 0.01004859200000, 0.00907335139000, 0.00814722732000, 0.00727036053000, 0.00644288435000, 0.00566492464000, 0.00493659976000, 0.00425802059000, 0.00362929044000, 0.00305050510000, 0.00252175277000, 0.00204311406000, 0.00161466197000, 0.00123646188000, 0.00090857151200, 0.00063104094300, 0.00040391257300, 0.00022722112400, 0.00010099361700, 0.00002524937370, 0.00000000000000 };

	static constexpr std::array<std::complex<dfloat>, 1023> twiddle_factors = { std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.99518472667220, -0.09801714032956), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.95694033573221, -0.29028467725446), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.88192126434836, -0.47139673682600), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.77301045336274, -0.63439328416365), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.63439328416365, -0.77301045336274), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.47139673682600, -0.88192126434836), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.29028467725446, -0.95694033573221), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.09801714032956, -0.99518472667220), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.09801714032956, -0.99518472667220), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.29028467725446, -0.95694033573221), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.47139673682600, -0.88192126434836), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.63439328416365, -0.77301045336274), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.77301045336274, -0.63439328416365), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.88192126434835, -0.47139673682600), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.95694033573221, -0.29028467725446), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(-0.99518472667220, -0.09801714032956), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.99879545620517, -0.04906767432742), std::complex<dfloat>(0.99518472667220, -0.09801714032956), std::complex<dfloat>(0.98917650996478, -0.14673047445536), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.97003125319454, -0.24298017990326), std::complex<dfloat>(0.95694033573221, -0.29028467725446), std::complex<dfloat>(0.94154406518302, -0.33688985339222), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.90398929312344, -0.42755509343028), std::complex<dfloat>(0.88192126434836, -0.47139673682600), std::complex<dfloat>(0.85772861000027, -0.51410274419322), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.80320753148064, -0.59569930449243), std::complex<dfloat>(0.77301045336274, -0.63439328416365), std::complex<dfloat>(0.74095112535496, -0.67155895484702), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.67155895484702, -0.74095112535496), std::complex<dfloat>(0.63439328416365, -0.77301045336274), std::complex<dfloat>(0.59569930449243, -0.80320753148064), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.51410274419322, -0.85772861000027), std::complex<dfloat>(0.47139673682600, -0.88192126434836), std::complex<dfloat>(0.42755509343028, -0.90398929312344), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.33688985339222, -0.94154406518302), std::complex<dfloat>(0.29028467725446, -0.95694033573221), std::complex<dfloat>(0.24298017990326, -0.97003125319454), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.14673047445536, -0.98917650996478), std::complex<dfloat>(0.09801714032956, -0.99518472667220), std::complex<dfloat>(0.04906767432742, -0.99879545620517), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.04906767432742, -0.99879545620517), std::complex<dfloat>(-0.09801714032956, -0.99518472667220), std::complex<dfloat>(-0.14673047445536, -0.98917650996478), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.24298017990326, -0.97003125319454), std::complex<dfloat>(-0.29028467725446, -0.95694033573221), std::complex<dfloat>(-0.33688985339222, -0.94154406518302), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.42755509343028, -0.90398929312344), std::complex<dfloat>(-0.47139673682600, -0.88192126434836), std::complex<dfloat>(-0.51410274419322, -0.85772861000027), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.59569930449243, -0.80320753148064), std::complex<dfloat>(-0.63439328416365, -0.77301045336274), std::complex<dfloat>(-0.67155895484702, -0.74095112535496), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.74095112535496, -0.67155895484702), std::complex<dfloat>(-0.77301045336274, -0.63439328416365), std::complex<dfloat>(-0.80320753148064, -0.59569930449243), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.85772861000027, -0.51410274419322), std::complex<dfloat>(-0.88192126434835, -0.47139673682600), std::complex<dfloat>(-0.90398929312344, -0.42755509343028), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.94154406518302, -0.33688985339222), std::complex<dfloat>(-0.95694033573221, -0.29028467725446), std::complex<dfloat>(-0.97003125319454, -0.24298017990326), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(-0.98917650996478, -0.14673047445536), std::complex<dfloat>(-0.99518472667220, -0.09801714032956), std::complex<dfloat>(-0.99879545620517, -0.04906767432742), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.99969881869620, -0.02454122852291), std::complex<dfloat>(0.99879545620517, -0.04906767432742), std::complex<dfloat>(0.99729045667869, -0.07356456359967), std::complex<dfloat>(0.99518472667220, -0.09801714032956), std::complex<dfloat>(0.99247953459871, -0.12241067519922), std::complex<dfloat>(0.98917650996478, -0.14673047445536), std::complex<dfloat>(0.98527764238894, -0.17096188876030), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.97570213003853, -0.21910124015687), std::complex<dfloat>(0.97003125319454, -0.24298017990326), std::complex<dfloat>(0.96377606579544, -0.26671275747490), std::complex<dfloat>(0.95694033573221, -0.29028467725446), std::complex<dfloat>(0.94952818059304, -0.31368174039889), std::complex<dfloat>(0.94154406518302, -0.33688985339222), std::complex<dfloat>(0.93299279883474, -0.35989503653499), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.91420975570353, -0.40524131400499), std::complex<dfloat>(0.90398929312344, -0.42755509343028), std::complex<dfloat>(0.89322430119552, -0.44961132965461), std::complex<dfloat>(0.88192126434836, -0.47139673682600), std::complex<dfloat>(0.87008699110871, -0.49289819222978), std::complex<dfloat>(0.85772861000027, -0.51410274419322), std::complex<dfloat>(0.84485356524971, -0.53499761988710), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.81758481315158, -0.57580819141785), std::complex<dfloat>(0.80320753148064, -0.59569930449243), std::complex<dfloat>(0.78834642762661, -0.61523159058063), std::complex<dfloat>(0.77301045336274, -0.63439328416365), std::complex<dfloat>(0.75720884650648, -0.65317284295378), std::complex<dfloat>(0.74095112535496, -0.67155895484702), std::complex<dfloat>(0.72424708295147, -0.68954054473707), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.68954054473707, -0.72424708295147), std::complex<dfloat>(0.67155895484702, -0.74095112535496), std::complex<dfloat>(0.65317284295378, -0.75720884650648), std::complex<dfloat>(0.63439328416365, -0.77301045336274), std::complex<dfloat>(0.61523159058063, -0.78834642762661), std::complex<dfloat>(0.59569930449243, -0.80320753148064), std::complex<dfloat>(0.57580819141785, -0.81758481315158), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.53499761988710, -0.84485356524971), std::complex<dfloat>(0.51410274419322, -0.85772861000027), std::complex<dfloat>(0.49289819222978, -0.87008699110871), std::complex<dfloat>(0.47139673682600, -0.88192126434836), std::complex<dfloat>(0.44961132965461, -0.89322430119552), std::complex<dfloat>(0.42755509343028, -0.90398929312344), std::complex<dfloat>(0.40524131400499, -0.91420975570353), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.35989503653499, -0.93299279883474), std::complex<dfloat>(0.33688985339222, -0.94154406518302), std::complex<dfloat>(0.31368174039889, -0.94952818059304), std::complex<dfloat>(0.29028467725446, -0.95694033573221), std::complex<dfloat>(0.26671275747490, -0.96377606579544), std::complex<dfloat>(0.24298017990326, -0.97003125319454), std::complex<dfloat>(0.21910124015687, -0.97570213003853), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.17096188876030, -0.98527764238894), std::complex<dfloat>(0.14673047445536, -0.98917650996478), std::complex<dfloat>(0.12241067519922, -0.99247953459871), std::complex<dfloat>(0.09801714032956, -0.99518472667220), std::complex<dfloat>(0.07356456359967, -0.99729045667869), std::complex<dfloat>(0.04906767432742, -0.99879545620517), std::complex<dfloat>(0.02454122852291, -0.99969881869620), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.02454122852291, -0.99969881869620), std::complex<dfloat>(-0.04906767432742, -0.99879545620517), std::complex<dfloat>(-0.07356456359967, -0.99729045667869), std::complex<dfloat>(-0.09801714032956, -0.99518472667220), std::complex<dfloat>(-0.12241067519922, -0.99247953459871), std::complex<dfloat>(-0.14673047445536, -0.98917650996478), std::complex<dfloat>(-0.17096188876030, -0.98527764238894), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.21910124015687, -0.97570213003853), std::complex<dfloat>(-0.24298017990326, -0.97003125319454), std::complex<dfloat>(-0.26671275747490, -0.96377606579544), std::complex<dfloat>(-0.29028467725446, -0.95694033573221), std::complex<dfloat>(-0.31368174039889, -0.94952818059304), std::complex<dfloat>(-0.33688985339222, -0.94154406518302), std::complex<dfloat>(-0.35989503653499, -0.93299279883474), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.40524131400499, -0.91420975570353), std::complex<dfloat>(-0.42755509343028, -0.90398929312344), std::complex<dfloat>(-0.44961132965461, -0.89322430119552), std::complex<dfloat>(-0.47139673682600, -0.88192126434836), std::complex<dfloat>(-0.49289819222978, -0.87008699110871), std::complex<dfloat>(-0.51410274419322, -0.85772861000027), std::complex<dfloat>(-0.53499761988710, -0.84485356524971), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.57580819141785, -0.81758481315158), std::complex<dfloat>(-0.59569930449243, -0.80320753148064), std::complex<dfloat>(-0.61523159058063, -0.78834642762661), std::complex<dfloat>(-0.63439328416365, -0.77301045336274), std::complex<dfloat>(-0.65317284295378, -0.75720884650648), std::complex<dfloat>(-0.67155895484702, -0.74095112535496), std::complex<dfloat>(-0.68954054473707, -0.72424708295147), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.72424708295147, -0.68954054473707), std::complex<dfloat>(-0.74095112535496, -0.67155895484702), std::complex<dfloat>(-0.75720884650648, -0.65317284295378), std::complex<dfloat>(-0.77301045336274, -0.63439328416365), std::complex<dfloat>(-0.78834642762661, -0.61523159058063), std::complex<dfloat>(-0.80320753148064, -0.59569930449243), std::complex<dfloat>(-0.81758481315158, -0.57580819141785), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.84485356524971, -0.53499761988710), std::complex<dfloat>(-0.85772861000027, -0.51410274419322), std::complex<dfloat>(-0.87008699110871, -0.49289819222978), std::complex<dfloat>(-0.88192126434835, -0.47139673682600), std::complex<dfloat>(-0.89322430119552, -0.44961132965461), std::complex<dfloat>(-0.90398929312344, -0.42755509343028), std::complex<dfloat>(-0.91420975570353, -0.40524131400499), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.93299279883474, -0.35989503653499), std::complex<dfloat>(-0.94154406518302, -0.33688985339222), std::complex<dfloat>(-0.94952818059304, -0.31368174039889), std::complex<dfloat>(-0.95694033573221, -0.29028467725446), std::complex<dfloat>(-0.96377606579544, -0.26671275747490), std::complex<dfloat>(-0.97003125319454, -0.24298017990326), std::complex<dfloat>(-0.97570213003853, -0.21910124015687), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(-0.98527764238894, -0.17096188876030), std::complex<dfloat>(-0.98917650996478, -0.14673047445536), std::complex<dfloat>(-0.99247953459871, -0.12241067519922), std::complex<dfloat>(-0.99518472667220, -0.09801714032956), std::complex<dfloat>(-0.99729045667869, -0.07356456359967), std::complex<dfloat>(-0.99879545620517, -0.04906767432742), std::complex<dfloat>(-0.99969881869620, -0.02454122852291), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.99992470183914, -0.01227153828572), std::complex<dfloat>(0.99969881869620, -0.02454122852291), std::complex<dfloat>(0.99932238458835, -0.03680722294136), std::complex<dfloat>(0.99879545620517, -0.04906767432742), std::complex<dfloat>(0.99811811290015, -0.06132073630221), std::complex<dfloat>(0.99729045667869, -0.07356456359967), std::complex<dfloat>(0.99631261218278, -0.08579731234444), std::complex<dfloat>(0.99518472667220, -0.09801714032956), std::complex<dfloat>(0.99390697000236, -0.11022220729388), std::complex<dfloat>(0.99247953459871, -0.12241067519922), std::complex<dfloat>(0.99090263542778, -0.13458070850713), std::complex<dfloat>(0.98917650996478, -0.14673047445536), std::complex<dfloat>(0.98730141815786, -0.15885814333386), std::complex<dfloat>(0.98527764238894, -0.17096188876030), std::complex<dfloat>(0.98310548743122, -0.18303988795514), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.97831737071963, -0.20711137619222), std::complex<dfloat>(0.97570213003853, -0.21910124015687), std::complex<dfloat>(0.97293995220556, -0.23105810828067), std::complex<dfloat>(0.97003125319454, -0.24298017990326), std::complex<dfloat>(0.96697647104485, -0.25486565960451), std::complex<dfloat>(0.96377606579544, -0.26671275747490), std::complex<dfloat>(0.96043051941557, -0.27851968938505), std::complex<dfloat>(0.95694033573221, -0.29028467725446), std::complex<dfloat>(0.95330604035419, -0.30200594931923), std::complex<dfloat>(0.94952818059304, -0.31368174039889), std::complex<dfloat>(0.94560732538052, -0.32531029216226), std::complex<dfloat>(0.94154406518302, -0.33688985339222), std::complex<dfloat>(0.93733901191257, -0.34841868024943), std::complex<dfloat>(0.93299279883474, -0.35989503653499), std::complex<dfloat>(0.92850608047322, -0.37131719395184), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.91911385169006, -0.39399204006105), std::complex<dfloat>(0.91420975570353, -0.40524131400499), std::complex<dfloat>(0.90916798309052, -0.41642956009764), std::complex<dfloat>(0.90398929312344, -0.42755509343028), std::complex<dfloat>(0.89867446569395, -0.43861623853853), std::complex<dfloat>(0.89322430119552, -0.44961132965461), std::complex<dfloat>(0.88763962040285, -0.46053871095824), std::complex<dfloat>(0.88192126434836, -0.47139673682600), std::complex<dfloat>(0.87607009419541, -0.48218377207912), std::complex<dfloat>(0.87008699110871, -0.49289819222978), std::complex<dfloat>(0.86397285612159, -0.50353838372572), std::complex<dfloat>(0.85772861000027, -0.51410274419322), std::complex<dfloat>(0.85135519310527, -0.52458968267847), std::complex<dfloat>(0.84485356524971, -0.53499761988710), std::complex<dfloat>(0.83822470555484, -0.54532498842205), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.82458930278503, -0.56573181078361), std::complex<dfloat>(0.81758481315158, -0.57580819141785), std::complex<dfloat>(0.81045719825259, -0.58579785745644), std::complex<dfloat>(0.80320753148064, -0.59569930449243), std::complex<dfloat>(0.79583690460888, -0.60551104140433), std::complex<dfloat>(0.78834642762661, -0.61523159058063), std::complex<dfloat>(0.78073722857209, -0.62485948814239), std::complex<dfloat>(0.77301045336274, -0.63439328416365), std::complex<dfloat>(0.76516726562246, -0.64383154288979), std::complex<dfloat>(0.75720884650648, -0.65317284295378), std::complex<dfloat>(0.74913639452346, -0.66241577759017), std::complex<dfloat>(0.74095112535496, -0.67155895484702), std::complex<dfloat>(0.73265427167241, -0.68060099779545), std::complex<dfloat>(0.72424708295147, -0.68954054473707), std::complex<dfloat>(0.71573082528382, -0.69837624940897), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.69837624940897, -0.71573082528382), std::complex<dfloat>(0.68954054473707, -0.72424708295147), std::complex<dfloat>(0.68060099779545, -0.73265427167241), std::complex<dfloat>(0.67155895484702, -0.74095112535496), std::complex<dfloat>(0.66241577759017, -0.74913639452346), std::complex<dfloat>(0.65317284295378, -0.75720884650648), std::complex<dfloat>(0.64383154288979, -0.76516726562246), std::complex<dfloat>(0.63439328416365, -0.77301045336274), std::complex<dfloat>(0.62485948814239, -0.78073722857209), std::complex<dfloat>(0.61523159058063, -0.78834642762661), std::complex<dfloat>(0.60551104140433, -0.79583690460888), std::complex<dfloat>(0.59569930449243, -0.80320753148064), std::complex<dfloat>(0.58579785745644, -0.81045719825259), std::complex<dfloat>(0.57580819141785, -0.81758481315158), std::complex<dfloat>(0.56573181078361, -0.82458930278503), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.54532498842205, -0.83822470555484), std::complex<dfloat>(0.53499761988710, -0.84485356524971), std::complex<dfloat>(0.52458968267847, -0.85135519310527), std::complex<dfloat>(0.51410274419322, -0.85772861000027), std::complex<dfloat>(0.50353838372572, -0.86397285612159), std::complex<dfloat>(0.49289819222978, -0.87008699110871), std::complex<dfloat>(0.48218377207912, -0.87607009419541), std::complex<dfloat>(0.47139673682600, -0.88192126434836), std::complex<dfloat>(0.46053871095824, -0.88763962040285), std::complex<dfloat>(0.44961132965461, -0.89322430119552), std::complex<dfloat>(0.43861623853853, -0.89867446569395), std::complex<dfloat>(0.42755509343028, -0.90398929312344), std::complex<dfloat>(0.41642956009764, -0.90916798309052), std::complex<dfloat>(0.40524131400499, -0.91420975570353), std::complex<dfloat>(0.39399204006105, -0.91911385169006), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.37131719395184, -0.92850608047322), std::complex<dfloat>(0.35989503653499, -0.93299279883474), std::complex<dfloat>(0.34841868024943, -0.93733901191257), std::complex<dfloat>(0.33688985339222, -0.94154406518302), std::complex<dfloat>(0.32531029216226, -0.94560732538052), std::complex<dfloat>(0.31368174039889, -0.94952818059304), std::complex<dfloat>(0.30200594931923, -0.95330604035419), std::complex<dfloat>(0.29028467725446, -0.95694033573221), std::complex<dfloat>(0.27851968938505, -0.96043051941557), std::complex<dfloat>(0.26671275747490, -0.96377606579544), std::complex<dfloat>(0.25486565960451, -0.96697647104485), std::complex<dfloat>(0.24298017990326, -0.97003125319454), std::complex<dfloat>(0.23105810828067, -0.97293995220556), std::complex<dfloat>(0.21910124015687, -0.97570213003853), std::complex<dfloat>(0.20711137619222, -0.97831737071963), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.18303988795514, -0.98310548743122), std::complex<dfloat>(0.17096188876030, -0.98527764238894), std::complex<dfloat>(0.15885814333386, -0.98730141815786), std::complex<dfloat>(0.14673047445536, -0.98917650996478), std::complex<dfloat>(0.13458070850713, -0.99090263542778), std::complex<dfloat>(0.12241067519922, -0.99247953459871), std::complex<dfloat>(0.11022220729388, -0.99390697000236), std::complex<dfloat>(0.09801714032956, -0.99518472667220), std::complex<dfloat>(0.08579731234444, -0.99631261218278), std::complex<dfloat>(0.07356456359967, -0.99729045667869), std::complex<dfloat>(0.06132073630221, -0.99811811290015), std::complex<dfloat>(0.04906767432742, -0.99879545620517), std::complex<dfloat>(0.03680722294136, -0.99932238458835), std::complex<dfloat>(0.02454122852291, -0.99969881869620), std::complex<dfloat>(0.01227153828572, -0.99992470183914), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.01227153828572, -0.99992470183914), std::complex<dfloat>(-0.02454122852291, -0.99969881869620), std::complex<dfloat>(-0.03680722294136, -0.99932238458835), std::complex<dfloat>(-0.04906767432742, -0.99879545620517), std::complex<dfloat>(-0.06132073630221, -0.99811811290015), std::complex<dfloat>(-0.07356456359967, -0.99729045667869), std::complex<dfloat>(-0.08579731234444, -0.99631261218278), std::complex<dfloat>(-0.09801714032956, -0.99518472667220), std::complex<dfloat>(-0.11022220729388, -0.99390697000236), std::complex<dfloat>(-0.12241067519922, -0.99247953459871), std::complex<dfloat>(-0.13458070850713, -0.99090263542778), std::complex<dfloat>(-0.14673047445536, -0.98917650996478), std::complex<dfloat>(-0.15885814333386, -0.98730141815786), std::complex<dfloat>(-0.17096188876030, -0.98527764238894), std::complex<dfloat>(-0.18303988795514, -0.98310548743122), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.20711137619222, -0.97831737071963), std::complex<dfloat>(-0.21910124015687, -0.97570213003853), std::complex<dfloat>(-0.23105810828067, -0.97293995220556), std::complex<dfloat>(-0.24298017990326, -0.97003125319454), std::complex<dfloat>(-0.25486565960451, -0.96697647104485), std::complex<dfloat>(-0.26671275747490, -0.96377606579544), std::complex<dfloat>(-0.27851968938505, -0.96043051941557), std::complex<dfloat>(-0.29028467725446, -0.95694033573221), std::complex<dfloat>(-0.30200594931923, -0.95330604035419), std::complex<dfloat>(-0.31368174039889, -0.94952818059304), std::complex<dfloat>(-0.32531029216226, -0.94560732538052), std::complex<dfloat>(-0.33688985339222, -0.94154406518302), std::complex<dfloat>(-0.34841868024943, -0.93733901191257), std::complex<dfloat>(-0.35989503653499, -0.93299279883474), std::complex<dfloat>(-0.37131719395184, -0.92850608047322), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.39399204006105, -0.91911385169006), std::complex<dfloat>(-0.40524131400499, -0.91420975570353), std::complex<dfloat>(-0.41642956009764, -0.90916798309052), std::complex<dfloat>(-0.42755509343028, -0.90398929312344), std::complex<dfloat>(-0.43861623853853, -0.89867446569395), std::complex<dfloat>(-0.44961132965461, -0.89322430119552), std::complex<dfloat>(-0.46053871095824, -0.88763962040285), std::complex<dfloat>(-0.47139673682600, -0.88192126434836), std::complex<dfloat>(-0.48218377207912, -0.87607009419541), std::complex<dfloat>(-0.49289819222978, -0.87008699110871), std::complex<dfloat>(-0.50353838372572, -0.86397285612159), std::complex<dfloat>(-0.51410274419322, -0.85772861000027), std::complex<dfloat>(-0.52458968267847, -0.85135519310527), std::complex<dfloat>(-0.53499761988710, -0.84485356524971), std::complex<dfloat>(-0.54532498842205, -0.83822470555484), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.56573181078361, -0.82458930278503), std::complex<dfloat>(-0.57580819141785, -0.81758481315158), std::complex<dfloat>(-0.58579785745644, -0.81045719825259), std::complex<dfloat>(-0.59569930449243, -0.80320753148064), std::complex<dfloat>(-0.60551104140433, -0.79583690460888), std::complex<dfloat>(-0.61523159058063, -0.78834642762661), std::complex<dfloat>(-0.62485948814239, -0.78073722857209), std::complex<dfloat>(-0.63439328416365, -0.77301045336274), std::complex<dfloat>(-0.64383154288979, -0.76516726562246), std::complex<dfloat>(-0.65317284295378, -0.75720884650648), std::complex<dfloat>(-0.66241577759017, -0.74913639452346), std::complex<dfloat>(-0.67155895484702, -0.74095112535496), std::complex<dfloat>(-0.68060099779545, -0.73265427167241), std::complex<dfloat>(-0.68954054473707, -0.72424708295147), std::complex<dfloat>(-0.69837624940897, -0.71573082528382), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.71573082528382, -0.69837624940897), std::complex<dfloat>(-0.72424708295147, -0.68954054473707), std::complex<dfloat>(-0.73265427167241, -0.68060099779545), std::complex<dfloat>(-0.74095112535496, -0.67155895484702), std::complex<dfloat>(-0.74913639452346, -0.66241577759017), std::complex<dfloat>(-0.75720884650648, -0.65317284295378), std::complex<dfloat>(-0.76516726562246, -0.64383154288979), std::complex<dfloat>(-0.77301045336274, -0.63439328416365), std::complex<dfloat>(-0.78073722857209, -0.62485948814239), std::complex<dfloat>(-0.78834642762661, -0.61523159058063), std::complex<dfloat>(-0.79583690460888, -0.60551104140433), std::complex<dfloat>(-0.80320753148064, -0.59569930449243), std::complex<dfloat>(-0.81045719825259, -0.58579785745644), std::complex<dfloat>(-0.81758481315158, -0.57580819141785), std::complex<dfloat>(-0.82458930278503, -0.56573181078361), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.83822470555484, -0.54532498842205), std::complex<dfloat>(-0.84485356524971, -0.53499761988710), std::complex<dfloat>(-0.85135519310527, -0.52458968267847), std::complex<dfloat>(-0.85772861000027, -0.51410274419322), std::complex<dfloat>(-0.86397285612159, -0.50353838372572), std::complex<dfloat>(-0.87008699110871, -0.49289819222978), std::complex<dfloat>(-0.87607009419541, -0.48218377207912), std::complex<dfloat>(-0.88192126434835, -0.47139673682600), std::complex<dfloat>(-0.88763962040285, -0.46053871095824), std::complex<dfloat>(-0.89322430119552, -0.44961132965461), std::complex<dfloat>(-0.89867446569395, -0.43861623853853), std::complex<dfloat>(-0.90398929312344, -0.42755509343028), std::complex<dfloat>(-0.90916798309052, -0.41642956009764), std::complex<dfloat>(-0.91420975570353, -0.40524131400499), std::complex<dfloat>(-0.91911385169006, -0.39399204006105), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.92850608047322, -0.37131719395184), std::complex<dfloat>(-0.93299279883474, -0.35989503653499), std::complex<dfloat>(-0.93733901191257, -0.34841868024943), std::complex<dfloat>(-0.94154406518302, -0.33688985339222), std::complex<dfloat>(-0.94560732538052, -0.32531029216226), std::complex<dfloat>(-0.94952818059304, -0.31368174039889), std::complex<dfloat>(-0.95330604035419, -0.30200594931923), std::complex<dfloat>(-0.95694033573221, -0.29028467725446), std::complex<dfloat>(-0.96043051941557, -0.27851968938505), std::complex<dfloat>(-0.96377606579544, -0.26671275747490), std::complex<dfloat>(-0.96697647104485, -0.25486565960451), std::complex<dfloat>(-0.97003125319454, -0.24298017990326), std::complex<dfloat>(-0.97293995220556, -0.23105810828067), std::complex<dfloat>(-0.97570213003853, -0.21910124015687), std::complex<dfloat>(-0.97831737071963, -0.20711137619222), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(-0.98310548743122, -0.18303988795514), std::complex<dfloat>(-0.98527764238894, -0.17096188876030), std::complex<dfloat>(-0.98730141815786, -0.15885814333386), std::complex<dfloat>(-0.98917650996478, -0.14673047445536), std::complex<dfloat>(-0.99090263542778, -0.13458070850713), std::complex<dfloat>(-0.99247953459871, -0.12241067519922), std::complex<dfloat>(-0.99390697000236, -0.11022220729388), std::complex<dfloat>(-0.99518472667220, -0.09801714032956), std::complex<dfloat>(-0.99631261218278, -0.08579731234444), std::complex<dfloat>(-0.99729045667869, -0.07356456359967), std::complex<dfloat>(-0.99811811290015, -0.06132073630221), std::complex<dfloat>(-0.99879545620517, -0.04906767432742), std::complex<dfloat>(-0.99932238458835, -0.03680722294136), std::complex<dfloat>(-0.99969881869620, -0.02454122852291), std::complex<dfloat>(-0.99992470183914, -0.01227153828572), std::complex<dfloat>(1.00000000000000, 0.00000000000000), std::complex<dfloat>(0.99998117528260, -0.00613588464915), std::complex<dfloat>(0.99992470183914, -0.01227153828572), std::complex<dfloat>(0.99983058179582, -0.01840672990580), std::complex<dfloat>(0.99969881869620, -0.02454122852291), std::complex<dfloat>(0.99952941750109, -0.03067480317664), std::complex<dfloat>(0.99932238458835, -0.03680722294136), std::complex<dfloat>(0.99907772775265, -0.04293825693494), std::complex<dfloat>(0.99879545620517, -0.04906767432742), std::complex<dfloat>(0.99847558057329, -0.05519524434969), std::complex<dfloat>(0.99811811290015, -0.06132073630221), std::complex<dfloat>(0.99772306664419, -0.06744391956366), std::complex<dfloat>(0.99729045667869, -0.07356456359967), std::complex<dfloat>(0.99682029929117, -0.07968243797143), std::complex<dfloat>(0.99631261218278, -0.08579731234444), std::complex<dfloat>(0.99576741446766, -0.09190895649713), std::complex<dfloat>(0.99518472667220, -0.09801714032956), std::complex<dfloat>(0.99456457073426, -0.10412163387205), std::complex<dfloat>(0.99390697000236, -0.11022220729388), std::complex<dfloat>(0.99321194923479, -0.11631863091190), std::complex<dfloat>(0.99247953459871, -0.12241067519922), std::complex<dfloat>(0.99170975366910, -0.12849811079379), std::complex<dfloat>(0.99090263542778, -0.13458070850713), std::complex<dfloat>(0.99005821026230, -0.14065823933285), std::complex<dfloat>(0.98917650996478, -0.14673047445536), std::complex<dfloat>(0.98825756773075, -0.15279718525844), std::complex<dfloat>(0.98730141815786, -0.15885814333386), std::complex<dfloat>(0.98630809724460, -0.16491312048997), std::complex<dfloat>(0.98527764238894, -0.17096188876030), std::complex<dfloat>(0.98421009238693, -0.17700422041215), std::complex<dfloat>(0.98310548743122, -0.18303988795514), std::complex<dfloat>(0.98196386910956, -0.18906866414981), std::complex<dfloat>(0.98078528040323, -0.19509032201613), std::complex<dfloat>(0.97956976568544, -0.20110463484209), std::complex<dfloat>(0.97831737071963, -0.20711137619222), std::complex<dfloat>(0.97702814265775, -0.21311031991609), std::complex<dfloat>(0.97570213003853, -0.21910124015687), std::complex<dfloat>(0.97433938278558, -0.22508391135979), std::complex<dfloat>(0.97293995220556, -0.23105810828067), std::complex<dfloat>(0.97150389098625, -0.23702360599437), std::complex<dfloat>(0.97003125319454, -0.24298017990326), std::complex<dfloat>(0.96852209427442, -0.24892760574572), std::complex<dfloat>(0.96697647104485, -0.25486565960451), std::complex<dfloat>(0.96539444169769, -0.26079411791528), std::complex<dfloat>(0.96377606579544, -0.26671275747490), std::complex<dfloat>(0.96212140426904, -0.27262135544995), std::complex<dfloat>(0.96043051941557, -0.27851968938505), std::complex<dfloat>(0.95870347489587, -0.28440753721127), std::complex<dfloat>(0.95694033573221, -0.29028467725446), std::complex<dfloat>(0.95514116830577, -0.29615088824362), std::complex<dfloat>(0.95330604035419, -0.30200594931923), std::complex<dfloat>(0.95143502096901, -0.30784964004153), std::complex<dfloat>(0.94952818059304, -0.31368174039889), std::complex<dfloat>(0.94758559101774, -0.31950203081602), std::complex<dfloat>(0.94560732538052, -0.32531029216226), std::complex<dfloat>(0.94359345816196, -0.33110630575988), std::complex<dfloat>(0.94154406518302, -0.33688985339222), std::complex<dfloat>(0.93945922360219, -0.34266071731199), std::complex<dfloat>(0.93733901191257, -0.34841868024943), std::complex<dfloat>(0.93518350993895, -0.35416352542049), std::complex<dfloat>(0.93299279883474, -0.35989503653499), std::complex<dfloat>(0.93076696107898, -0.36561299780477), std::complex<dfloat>(0.92850608047322, -0.37131719395184), std::complex<dfloat>(0.92621024213831, -0.37700741021642), std::complex<dfloat>(0.92387953251129, -0.38268343236509), std::complex<dfloat>(0.92151403934204, -0.38834504669883), std::complex<dfloat>(0.91911385169006, -0.39399204006105), std::complex<dfloat>(0.91667905992104, -0.39962419984565), std::complex<dfloat>(0.91420975570353, -0.40524131400499), std::complex<dfloat>(0.91170603200543, -0.41084317105790), std::complex<dfloat>(0.90916798309052, -0.41642956009764), std::complex<dfloat>(0.90659570451492, -0.42200027079980), std::complex<dfloat>(0.90398929312344, -0.42755509343028), std::complex<dfloat>(0.90134884704602, -0.43309381885315), std::complex<dfloat>(0.89867446569395, -0.43861623853853), std::complex<dfloat>(0.89596624975619, -0.44412214457043), std::complex<dfloat>(0.89322430119552, -0.44961132965461), std::complex<dfloat>(0.89044872324476, -0.45508358712634), std::complex<dfloat>(0.88763962040285, -0.46053871095824), std::complex<dfloat>(0.88479709843094, -0.46597649576797), std::complex<dfloat>(0.88192126434836, -0.47139673682600), std::complex<dfloat>(0.87901222642863, -0.47679923006332), std::complex<dfloat>(0.87607009419541, -0.48218377207912), std::complex<dfloat>(0.87309497841829, -0.48755016014844), std::complex<dfloat>(0.87008699110871, -0.49289819222978), std::complex<dfloat>(0.86704624551569, -0.49822766697278), std::complex<dfloat>(0.86397285612159, -0.50353838372572), std::complex<dfloat>(0.86086693863777, -0.50883014254311), std::complex<dfloat>(0.85772861000027, -0.51410274419322), std::complex<dfloat>(0.85455798836540, -0.51935599016559), std::complex<dfloat>(0.85135519310527, -0.52458968267847), std::complex<dfloat>(0.84812034480330, -0.52980362468629), std::complex<dfloat>(0.84485356524971, -0.53499761988710), std::complex<dfloat>(0.84155497743690, -0.54017147272989), std::complex<dfloat>(0.83822470555484, -0.54532498842205), std::complex<dfloat>(0.83486287498638, -0.55045797293660), std::complex<dfloat>(0.83146961230255, -0.55557023301960), std::complex<dfloat>(0.82804504525776, -0.56066157619734), std::complex<dfloat>(0.82458930278503, -0.56573181078361), std::complex<dfloat>(0.82110251499110, -0.57078074588697), std::complex<dfloat>(0.81758481315158, -0.57580819141785), std::complex<dfloat>(0.81403632970595, -0.58081395809576), std::complex<dfloat>(0.81045719825259, -0.58579785745644), std::complex<dfloat>(0.80684755354380, -0.59075970185887), std::complex<dfloat>(0.80320753148064, -0.59569930449243), std::complex<dfloat>(0.79953726910791, -0.60061647938387), std::complex<dfloat>(0.79583690460888, -0.60551104140433), std::complex<dfloat>(0.79210657730021, -0.61038280627631), std::complex<dfloat>(0.78834642762661, -0.61523159058063), std::complex<dfloat>(0.78455659715558, -0.62005721176329), std::complex<dfloat>(0.78073722857209, -0.62485948814239), std::complex<dfloat>(0.77688846567323, -0.62963823891493), std::complex<dfloat>(0.77301045336274, -0.63439328416365), std::complex<dfloat>(0.76910333764558, -0.63912444486378), std::complex<dfloat>(0.76516726562246, -0.64383154288979), std::complex<dfloat>(0.76120238548426, -0.64851440102211), std::complex<dfloat>(0.75720884650648, -0.65317284295378), std::complex<dfloat>(0.75318679904361, -0.65780669329708), std::complex<dfloat>(0.74913639452346, -0.66241577759017), std::complex<dfloat>(0.74505778544147, -0.66699992230364), std::complex<dfloat>(0.74095112535496, -0.67155895484702), std::complex<dfloat>(0.73681656887737, -0.67609270357532), std::complex<dfloat>(0.73265427167241, -0.68060099779545), std::complex<dfloat>(0.72846439044823, -0.68508366777270), std::complex<dfloat>(0.72424708295147, -0.68954054473707), std::complex<dfloat>(0.72000250796138, -0.69397146088965), std::complex<dfloat>(0.71573082528382, -0.69837624940897), std::complex<dfloat>(0.71143219574522, -0.70275474445723), std::complex<dfloat>(0.70710678118655, -0.70710678118655), std::complex<dfloat>(0.70275474445723, -0.71143219574522), std::complex<dfloat>(0.69837624940897, -0.71573082528382), std::complex<dfloat>(0.69397146088965, -0.72000250796138), std::complex<dfloat>(0.68954054473707, -0.72424708295147), std::complex<dfloat>(0.68508366777270, -0.72846439044823), std::complex<dfloat>(0.68060099779545, -0.73265427167241), std::complex<dfloat>(0.67609270357532, -0.73681656887737), std::complex<dfloat>(0.67155895484702, -0.74095112535496), std::complex<dfloat>(0.66699992230364, -0.74505778544147), std::complex<dfloat>(0.66241577759017, -0.74913639452346), std::complex<dfloat>(0.65780669329708, -0.75318679904361), std::complex<dfloat>(0.65317284295378, -0.75720884650648), std::complex<dfloat>(0.64851440102211, -0.76120238548426), std::complex<dfloat>(0.64383154288979, -0.76516726562246), std::complex<dfloat>(0.63912444486378, -0.76910333764558), std::complex<dfloat>(0.63439328416365, -0.77301045336274), std::complex<dfloat>(0.62963823891493, -0.77688846567323), std::complex<dfloat>(0.62485948814239, -0.78073722857209), std::complex<dfloat>(0.62005721176329, -0.78455659715558), std::complex<dfloat>(0.61523159058063, -0.78834642762661), std::complex<dfloat>(0.61038280627631, -0.79210657730021), std::complex<dfloat>(0.60551104140433, -0.79583690460888), std::complex<dfloat>(0.60061647938387, -0.79953726910791), std::complex<dfloat>(0.59569930449243, -0.80320753148064), std::complex<dfloat>(0.59075970185887, -0.80684755354380), std::complex<dfloat>(0.58579785745644, -0.81045719825259), std::complex<dfloat>(0.58081395809576, -0.81403632970595), std::complex<dfloat>(0.57580819141785, -0.81758481315158), std::complex<dfloat>(0.57078074588697, -0.82110251499110), std::complex<dfloat>(0.56573181078361, -0.82458930278503), std::complex<dfloat>(0.56066157619734, -0.82804504525776), std::complex<dfloat>(0.55557023301960, -0.83146961230255), std::complex<dfloat>(0.55045797293660, -0.83486287498638), std::complex<dfloat>(0.54532498842205, -0.83822470555484), std::complex<dfloat>(0.54017147272989, -0.84155497743690), std::complex<dfloat>(0.53499761988710, -0.84485356524971), std::complex<dfloat>(0.52980362468629, -0.84812034480330), std::complex<dfloat>(0.52458968267847, -0.85135519310527), std::complex<dfloat>(0.51935599016559, -0.85455798836540), std::complex<dfloat>(0.51410274419322, -0.85772861000027), std::complex<dfloat>(0.50883014254311, -0.86086693863777), std::complex<dfloat>(0.50353838372572, -0.86397285612159), std::complex<dfloat>(0.49822766697278, -0.86704624551569), std::complex<dfloat>(0.49289819222978, -0.87008699110871), std::complex<dfloat>(0.48755016014844, -0.87309497841829), std::complex<dfloat>(0.48218377207912, -0.87607009419541), std::complex<dfloat>(0.47679923006332, -0.87901222642863), std::complex<dfloat>(0.47139673682600, -0.88192126434836), std::complex<dfloat>(0.46597649576797, -0.88479709843094), std::complex<dfloat>(0.46053871095824, -0.88763962040285), std::complex<dfloat>(0.45508358712634, -0.89044872324476), std::complex<dfloat>(0.44961132965461, -0.89322430119552), std::complex<dfloat>(0.44412214457043, -0.89596624975619), std::complex<dfloat>(0.43861623853853, -0.89867446569395), std::complex<dfloat>(0.43309381885315, -0.90134884704602), std::complex<dfloat>(0.42755509343028, -0.90398929312344), std::complex<dfloat>(0.42200027079980, -0.90659570451492), std::complex<dfloat>(0.41642956009764, -0.90916798309052), std::complex<dfloat>(0.41084317105790, -0.91170603200543), std::complex<dfloat>(0.40524131400499, -0.91420975570353), std::complex<dfloat>(0.39962419984565, -0.91667905992104), std::complex<dfloat>(0.39399204006105, -0.91911385169006), std::complex<dfloat>(0.38834504669883, -0.92151403934204), std::complex<dfloat>(0.38268343236509, -0.92387953251129), std::complex<dfloat>(0.37700741021642, -0.92621024213831), std::complex<dfloat>(0.37131719395184, -0.92850608047322), std::complex<dfloat>(0.36561299780477, -0.93076696107898), std::complex<dfloat>(0.35989503653499, -0.93299279883474), std::complex<dfloat>(0.35416352542049, -0.93518350993895), std::complex<dfloat>(0.34841868024943, -0.93733901191257), std::complex<dfloat>(0.34266071731199, -0.93945922360219), std::complex<dfloat>(0.33688985339222, -0.94154406518302), std::complex<dfloat>(0.33110630575988, -0.94359345816196), std::complex<dfloat>(0.32531029216226, -0.94560732538052), std::complex<dfloat>(0.31950203081602, -0.94758559101774), std::complex<dfloat>(0.31368174039889, -0.94952818059304), std::complex<dfloat>(0.30784964004153, -0.95143502096901), std::complex<dfloat>(0.30200594931923, -0.95330604035419), std::complex<dfloat>(0.29615088824362, -0.95514116830577), std::complex<dfloat>(0.29028467725446, -0.95694033573221), std::complex<dfloat>(0.28440753721127, -0.95870347489587), std::complex<dfloat>(0.27851968938505, -0.96043051941557), std::complex<dfloat>(0.27262135544995, -0.96212140426904), std::complex<dfloat>(0.26671275747490, -0.96377606579544), std::complex<dfloat>(0.26079411791528, -0.96539444169769), std::complex<dfloat>(0.25486565960451, -0.96697647104485), std::complex<dfloat>(0.24892760574572, -0.96852209427442), std::complex<dfloat>(0.24298017990326, -0.97003125319454), std::complex<dfloat>(0.23702360599437, -0.97150389098625), std::complex<dfloat>(0.23105810828067, -0.97293995220556), std::complex<dfloat>(0.22508391135979, -0.97433938278558), std::complex<dfloat>(0.21910124015687, -0.97570213003853), std::complex<dfloat>(0.21311031991609, -0.97702814265775), std::complex<dfloat>(0.20711137619222, -0.97831737071963), std::complex<dfloat>(0.20110463484209, -0.97956976568544), std::complex<dfloat>(0.19509032201613, -0.98078528040323), std::complex<dfloat>(0.18906866414981, -0.98196386910956), std::complex<dfloat>(0.18303988795514, -0.98310548743122), std::complex<dfloat>(0.17700422041215, -0.98421009238693), std::complex<dfloat>(0.17096188876030, -0.98527764238894), std::complex<dfloat>(0.16491312048997, -0.98630809724460), std::complex<dfloat>(0.15885814333386, -0.98730141815786), std::complex<dfloat>(0.15279718525844, -0.98825756773075), std::complex<dfloat>(0.14673047445536, -0.98917650996478), std::complex<dfloat>(0.14065823933285, -0.99005821026230), std::complex<dfloat>(0.13458070850713, -0.99090263542778), std::complex<dfloat>(0.12849811079379, -0.99170975366910), std::complex<dfloat>(0.12241067519922, -0.99247953459871), std::complex<dfloat>(0.11631863091190, -0.99321194923479), std::complex<dfloat>(0.11022220729388, -0.99390697000236), std::complex<dfloat>(0.10412163387205, -0.99456457073426), std::complex<dfloat>(0.09801714032956, -0.99518472667220), std::complex<dfloat>(0.09190895649713, -0.99576741446766), std::complex<dfloat>(0.08579731234444, -0.99631261218278), std::complex<dfloat>(0.07968243797143, -0.99682029929117), std::complex<dfloat>(0.07356456359967, -0.99729045667869), std::complex<dfloat>(0.06744391956366, -0.99772306664419), std::complex<dfloat>(0.06132073630221, -0.99811811290015), std::complex<dfloat>(0.05519524434969, -0.99847558057329), std::complex<dfloat>(0.04906767432742, -0.99879545620517), std::complex<dfloat>(0.04293825693494, -0.99907772775265), std::complex<dfloat>(0.03680722294136, -0.99932238458835), std::complex<dfloat>(0.03067480317664, -0.99952941750109), std::complex<dfloat>(0.02454122852291, -0.99969881869620), std::complex<dfloat>(0.01840672990580, -0.99983058179582), std::complex<dfloat>(0.01227153828572, -0.99992470183914), std::complex<dfloat>(0.00613588464915, -0.99998117528260), std::complex<dfloat>(0.00000000000000, -1.00000000000000), std::complex<dfloat>(-0.00613588464915, -0.99998117528260), std::complex<dfloat>(-0.01227153828572, -0.99992470183914), std::complex<dfloat>(-0.01840672990580, -0.99983058179582), std::complex<dfloat>(-0.02454122852291, -0.99969881869620), std::complex<dfloat>(-0.03067480317664, -0.99952941750109), std::complex<dfloat>(-0.03680722294136, -0.99932238458835), std::complex<dfloat>(-0.04293825693494, -0.99907772775265), std::complex<dfloat>(-0.04906767432742, -0.99879545620517), std::complex<dfloat>(-0.05519524434969, -0.99847558057329), std::complex<dfloat>(-0.06132073630221, -0.99811811290015), std::complex<dfloat>(-0.06744391956366, -0.99772306664419), std::complex<dfloat>(-0.07356456359967, -0.99729045667869), std::complex<dfloat>(-0.07968243797143, -0.99682029929117), std::complex<dfloat>(-0.08579731234444, -0.99631261218278), std::complex<dfloat>(-0.09190895649713, -0.99576741446766), std::complex<dfloat>(-0.09801714032956, -0.99518472667220), std::complex<dfloat>(-0.10412163387205, -0.99456457073426), std::complex<dfloat>(-0.11022220729388, -0.99390697000236), std::complex<dfloat>(-0.11631863091190, -0.99321194923479), std::complex<dfloat>(-0.12241067519922, -0.99247953459871), std::complex<dfloat>(-0.12849811079379, -0.99170975366910), std::complex<dfloat>(-0.13458070850713, -0.99090263542778), std::complex<dfloat>(-0.14065823933285, -0.99005821026230), std::complex<dfloat>(-0.14673047445536, -0.98917650996478), std::complex<dfloat>(-0.15279718525844, -0.98825756773075), std::complex<dfloat>(-0.15885814333386, -0.98730141815786), std::complex<dfloat>(-0.16491312048997, -0.98630809724460), std::complex<dfloat>(-0.17096188876030, -0.98527764238894), std::complex<dfloat>(-0.17700422041215, -0.98421009238693), std::complex<dfloat>(-0.18303988795514, -0.98310548743122), std::complex<dfloat>(-0.18906866414981, -0.98196386910956), std::complex<dfloat>(-0.19509032201613, -0.98078528040323), std::complex<dfloat>(-0.20110463484209, -0.97956976568544), std::complex<dfloat>(-0.20711137619222, -0.97831737071963), std::complex<dfloat>(-0.21311031991609, -0.97702814265775), std::complex<dfloat>(-0.21910124015687, -0.97570213003853), std::complex<dfloat>(-0.22508391135979, -0.97433938278558), std::complex<dfloat>(-0.23105810828067, -0.97293995220556), std::complex<dfloat>(-0.23702360599437, -0.97150389098625), std::complex<dfloat>(-0.24298017990326, -0.97003125319454), std::complex<dfloat>(-0.24892760574572, -0.96852209427442), std::complex<dfloat>(-0.25486565960451, -0.96697647104485), std::complex<dfloat>(-0.26079411791528, -0.96539444169769), std::complex<dfloat>(-0.26671275747490, -0.96377606579544), std::complex<dfloat>(-0.27262135544995, -0.96212140426904), std::complex<dfloat>(-0.27851968938505, -0.96043051941557), std::complex<dfloat>(-0.28440753721127, -0.95870347489587), std::complex<dfloat>(-0.29028467725446, -0.95694033573221), std::complex<dfloat>(-0.29615088824362, -0.95514116830577), std::complex<dfloat>(-0.30200594931923, -0.95330604035419), std::complex<dfloat>(-0.30784964004153, -0.95143502096901), std::complex<dfloat>(-0.31368174039889, -0.94952818059304), std::complex<dfloat>(-0.31950203081602, -0.94758559101774), std::complex<dfloat>(-0.32531029216226, -0.94560732538052), std::complex<dfloat>(-0.33110630575988, -0.94359345816196), std::complex<dfloat>(-0.33688985339222, -0.94154406518302), std::complex<dfloat>(-0.34266071731199, -0.93945922360219), std::complex<dfloat>(-0.34841868024943, -0.93733901191257), std::complex<dfloat>(-0.35416352542049, -0.93518350993895), std::complex<dfloat>(-0.35989503653499, -0.93299279883474), std::complex<dfloat>(-0.36561299780477, -0.93076696107898), std::complex<dfloat>(-0.37131719395184, -0.92850608047322), std::complex<dfloat>(-0.37700741021642, -0.92621024213831), std::complex<dfloat>(-0.38268343236509, -0.92387953251129), std::complex<dfloat>(-0.38834504669883, -0.92151403934204), std::complex<dfloat>(-0.39399204006105, -0.91911385169006), std::complex<dfloat>(-0.39962419984565, -0.91667905992104), std::complex<dfloat>(-0.40524131400499, -0.91420975570353), std::complex<dfloat>(-0.41084317105790, -0.91170603200543), std::complex<dfloat>(-0.41642956009764, -0.90916798309052), std::complex<dfloat>(-0.42200027079980, -0.90659570451492), std::complex<dfloat>(-0.42755509343028, -0.90398929312344), std::complex<dfloat>(-0.43309381885315, -0.90134884704602), std::complex<dfloat>(-0.43861623853853, -0.89867446569395), std::complex<dfloat>(-0.44412214457043, -0.89596624975619), std::complex<dfloat>(-0.44961132965461, -0.89322430119552), std::complex<dfloat>(-0.45508358712634, -0.89044872324476), std::complex<dfloat>(-0.46053871095824, -0.88763962040285), std::complex<dfloat>(-0.46597649576797, -0.88479709843094), std::complex<dfloat>(-0.47139673682600, -0.88192126434836), std::complex<dfloat>(-0.47679923006332, -0.87901222642863), std::complex<dfloat>(-0.48218377207912, -0.87607009419541), std::complex<dfloat>(-0.48755016014844, -0.87309497841829), std::complex<dfloat>(-0.49289819222978, -0.87008699110871), std::complex<dfloat>(-0.49822766697278, -0.86704624551569), std::complex<dfloat>(-0.50353838372572, -0.86397285612159), std::complex<dfloat>(-0.50883014254311, -0.86086693863777), std::complex<dfloat>(-0.51410274419322, -0.85772861000027), std::complex<dfloat>(-0.51935599016559, -0.85455798836540), std::complex<dfloat>(-0.52458968267847, -0.85135519310527), std::complex<dfloat>(-0.52980362468629, -0.84812034480330), std::complex<dfloat>(-0.53499761988710, -0.84485356524971), std::complex<dfloat>(-0.54017147272989, -0.84155497743690), std::complex<dfloat>(-0.54532498842205, -0.83822470555484), std::complex<dfloat>(-0.55045797293660, -0.83486287498638), std::complex<dfloat>(-0.55557023301960, -0.83146961230255), std::complex<dfloat>(-0.56066157619734, -0.82804504525776), std::complex<dfloat>(-0.56573181078361, -0.82458930278503), std::complex<dfloat>(-0.57078074588697, -0.82110251499110), std::complex<dfloat>(-0.57580819141785, -0.81758481315158), std::complex<dfloat>(-0.58081395809576, -0.81403632970595), std::complex<dfloat>(-0.58579785745644, -0.81045719825259), std::complex<dfloat>(-0.59075970185887, -0.80684755354380), std::complex<dfloat>(-0.59569930449243, -0.80320753148064), std::complex<dfloat>(-0.60061647938387, -0.79953726910791), std::complex<dfloat>(-0.60551104140433, -0.79583690460888), std::complex<dfloat>(-0.61038280627631, -0.79210657730021), std::complex<dfloat>(-0.61523159058063, -0.78834642762661), std::complex<dfloat>(-0.62005721176329, -0.78455659715558), std::complex<dfloat>(-0.62485948814239, -0.78073722857209), std::complex<dfloat>(-0.62963823891493, -0.77688846567323), std::complex<dfloat>(-0.63439328416365, -0.77301045336274), std::complex<dfloat>(-0.63912444486378, -0.76910333764558), std::complex<dfloat>(-0.64383154288979, -0.76516726562246), std::complex<dfloat>(-0.64851440102211, -0.76120238548426), std::complex<dfloat>(-0.65317284295378, -0.75720884650648), std::complex<dfloat>(-0.65780669329708, -0.75318679904361), std::complex<dfloat>(-0.66241577759017, -0.74913639452346), std::complex<dfloat>(-0.66699992230364, -0.74505778544147), std::complex<dfloat>(-0.67155895484702, -0.74095112535496), std::complex<dfloat>(-0.67609270357532, -0.73681656887737), std::complex<dfloat>(-0.68060099779545, -0.73265427167241), std::complex<dfloat>(-0.68508366777270, -0.72846439044823), std::complex<dfloat>(-0.68954054473707, -0.72424708295147), std::complex<dfloat>(-0.69397146088965, -0.72000250796138), std::complex<dfloat>(-0.69837624940897, -0.71573082528382), std::complex<dfloat>(-0.70275474445723, -0.71143219574522), std::complex<dfloat>(-0.70710678118655, -0.70710678118655), std::complex<dfloat>(-0.71143219574522, -0.70275474445723), std::complex<dfloat>(-0.71573082528382, -0.69837624940897), std::complex<dfloat>(-0.72000250796138, -0.69397146088965), std::complex<dfloat>(-0.72424708295147, -0.68954054473707), std::complex<dfloat>(-0.72846439044823, -0.68508366777270), std::complex<dfloat>(-0.73265427167241, -0.68060099779545), std::complex<dfloat>(-0.73681656887737, -0.67609270357532), std::complex<dfloat>(-0.74095112535496, -0.67155895484702), std::complex<dfloat>(-0.74505778544147, -0.66699992230364), std::complex<dfloat>(-0.74913639452346, -0.66241577759017), std::complex<dfloat>(-0.75318679904361, -0.65780669329708), std::complex<dfloat>(-0.75720884650648, -0.65317284295378), std::complex<dfloat>(-0.76120238548426, -0.64851440102211), std::complex<dfloat>(-0.76516726562246, -0.64383154288979), std::complex<dfloat>(-0.76910333764558, -0.63912444486378), std::complex<dfloat>(-0.77301045336274, -0.63439328416365), std::complex<dfloat>(-0.77688846567323, -0.62963823891493), std::complex<dfloat>(-0.78073722857209, -0.62485948814239), std::complex<dfloat>(-0.78455659715558, -0.62005721176329), std::complex<dfloat>(-0.78834642762661, -0.61523159058063), std::complex<dfloat>(-0.79210657730021, -0.61038280627631), std::complex<dfloat>(-0.79583690460888, -0.60551104140433), std::complex<dfloat>(-0.79953726910791, -0.60061647938387), std::complex<dfloat>(-0.80320753148064, -0.59569930449243), std::complex<dfloat>(-0.80684755354380, -0.59075970185887), std::complex<dfloat>(-0.81045719825259, -0.58579785745644), std::complex<dfloat>(-0.81403632970595, -0.58081395809576), std::complex<dfloat>(-0.81758481315158, -0.57580819141785), std::complex<dfloat>(-0.82110251499110, -0.57078074588697), std::complex<dfloat>(-0.82458930278503, -0.56573181078361), std::complex<dfloat>(-0.82804504525776, -0.56066157619734), std::complex<dfloat>(-0.83146961230255, -0.55557023301960), std::complex<dfloat>(-0.83486287498638, -0.55045797293660), std::complex<dfloat>(-0.83822470555484, -0.54532498842205), std::complex<dfloat>(-0.84155497743690, -0.54017147272989), std::complex<dfloat>(-0.84485356524971, -0.53499761988710), std::complex<dfloat>(-0.84812034480330, -0.52980362468629), std::complex<dfloat>(-0.85135519310527, -0.52458968267847), std::complex<dfloat>(-0.85455798836540, -0.51935599016559), std::complex<dfloat>(-0.85772861000027, -0.51410274419322), std::complex<dfloat>(-0.86086693863777, -0.50883014254311), std::complex<dfloat>(-0.86397285612159, -0.50353838372572), std::complex<dfloat>(-0.86704624551569, -0.49822766697278), std::complex<dfloat>(-0.87008699110871, -0.49289819222978), std::complex<dfloat>(-0.87309497841829, -0.48755016014844), std::complex<dfloat>(-0.87607009419541, -0.48218377207912), std::complex<dfloat>(-0.87901222642863, -0.47679923006332), std::complex<dfloat>(-0.88192126434835, -0.47139673682600), std::complex<dfloat>(-0.88479709843094, -0.46597649576797), std::complex<dfloat>(-0.88763962040285, -0.46053871095824), std::complex<dfloat>(-0.89044872324476, -0.45508358712634), std::complex<dfloat>(-0.89322430119552, -0.44961132965461), std::complex<dfloat>(-0.89596624975619, -0.44412214457043), std::complex<dfloat>(-0.89867446569395, -0.43861623853853), std::complex<dfloat>(-0.90134884704602, -0.43309381885315), std::complex<dfloat>(-0.90398929312344, -0.42755509343028), std::complex<dfloat>(-0.90659570451492, -0.42200027079980), std::complex<dfloat>(-0.90916798309052, -0.41642956009764), std::complex<dfloat>(-0.91170603200543, -0.41084317105790), std::complex<dfloat>(-0.91420975570353, -0.40524131400499), std::complex<dfloat>(-0.91667905992104, -0.39962419984565), std::complex<dfloat>(-0.91911385169006, -0.39399204006105), std::complex<dfloat>(-0.92151403934204, -0.38834504669883), std::complex<dfloat>(-0.92387953251129, -0.38268343236509), std::complex<dfloat>(-0.92621024213831, -0.37700741021642), std::complex<dfloat>(-0.92850608047322, -0.37131719395184), std::complex<dfloat>(-0.93076696107898, -0.36561299780477), std::complex<dfloat>(-0.93299279883474, -0.35989503653499), std::complex<dfloat>(-0.93518350993895, -0.35416352542049), std::complex<dfloat>(-0.93733901191257, -0.34841868024943), std::complex<dfloat>(-0.93945922360219, -0.34266071731199), std::complex<dfloat>(-0.94154406518302, -0.33688985339222), std::complex<dfloat>(-0.94359345816196, -0.33110630575988), std::complex<dfloat>(-0.94560732538052, -0.32531029216226), std::complex<dfloat>(-0.94758559101774, -0.31950203081602), std::complex<dfloat>(-0.94952818059304, -0.31368174039889), std::complex<dfloat>(-0.95143502096901, -0.30784964004153), std::complex<dfloat>(-0.95330604035419, -0.30200594931923), std::complex<dfloat>(-0.95514116830577, -0.29615088824362), std::complex<dfloat>(-0.95694033573221, -0.29028467725446), std::complex<dfloat>(-0.95870347489587, -0.28440753721127), std::complex<dfloat>(-0.96043051941557, -0.27851968938505), std::complex<dfloat>(-0.96212140426904, -0.27262135544995), std::complex<dfloat>(-0.96377606579544, -0.26671275747490), std::complex<dfloat>(-0.96539444169769, -0.26079411791528), std::complex<dfloat>(-0.96697647104485, -0.25486565960451), std::complex<dfloat>(-0.96852209427442, -0.24892760574572), std::complex<dfloat>(-0.97003125319454, -0.24298017990326), std::complex<dfloat>(-0.97150389098625, -0.23702360599437), std::complex<dfloat>(-0.97293995220556, -0.23105810828067), std::complex<dfloat>(-0.97433938278558, -0.22508391135979), std::complex<dfloat>(-0.97570213003853, -0.21910124015687), std::complex<dfloat>(-0.97702814265775, -0.21311031991609), std::complex<dfloat>(-0.97831737071963, -0.20711137619222), std::complex<dfloat>(-0.97956976568544, -0.20110463484209), std::complex<dfloat>(-0.98078528040323, -0.19509032201613), std::complex<dfloat>(-0.98196386910956, -0.18906866414981), std::complex<dfloat>(-0.98310548743122, -0.18303988795514), std::complex<dfloat>(-0.98421009238693, -0.17700422041215), std::complex<dfloat>(-0.98527764238894, -0.17096188876030), std::complex<dfloat>(-0.98630809724460, -0.16491312048997), std::complex<dfloat>(-0.98730141815786, -0.15885814333386), std::complex<dfloat>(-0.98825756773075, -0.15279718525844), std::complex<dfloat>(-0.98917650996478, -0.14673047445536), std::complex<dfloat>(-0.99005821026230, -0.14065823933285), std::complex<dfloat>(-0.99090263542778, -0.13458070850713), std::complex<dfloat>(-0.99170975366910, -0.12849811079379), std::complex<dfloat>(-0.99247953459871, -0.12241067519922), std::complex<dfloat>(-0.99321194923479, -0.11631863091190), std::complex<dfloat>(-0.99390697000236, -0.11022220729388), std::complex<dfloat>(-0.99456457073426, -0.10412163387205), std::complex<dfloat>(-0.99518472667220, -0.09801714032956), std::complex<dfloat>(-0.99576741446766, -0.09190895649713), std::complex<dfloat>(-0.99631261218278, -0.08579731234444), std::complex<dfloat>(-0.99682029929117, -0.07968243797143), std::complex<dfloat>(-0.99729045667869, -0.07356456359967), std::complex<dfloat>(-0.99772306664419, -0.06744391956366), std::complex<dfloat>(-0.99811811290015, -0.06132073630221), std::complex<dfloat>(-0.99847558057329, -0.05519524434969), std::complex<dfloat>(-0.99879545620517, -0.04906767432742), std::complex<dfloat>(-0.99907772775265, -0.04293825693494), std::complex<dfloat>(-0.99932238458835, -0.03680722294136), std::complex<dfloat>(-0.99952941750109, -0.03067480317664), std::complex<dfloat>(-0.99969881869620, -0.02454122852291), std::complex<dfloat>(-0.99983058179582, -0.01840672990580), std::complex<dfloat>(-0.99992470183914, -0.01227153828572), std::complex<dfloat>(-0.99998117528260, -0.00613588464915) };
	static constexpr std::array<std::complex<dfloat>, 1023> inverse_twiddle_factors = { std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.99518472667220, 0.09801714032956), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.95694033573221, 0.29028467725446), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.88192126434836, 0.47139673682600), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.77301045336274, 0.63439328416365), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.63439328416365, 0.77301045336274), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.47139673682600, 0.88192126434836), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.29028467725446, 0.95694033573221), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.09801714032956, 0.99518472667220), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.09801714032956, 0.99518472667220), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.29028467725446, 0.95694033573221), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.47139673682600, 0.88192126434836), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.63439328416365, 0.77301045336274), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.77301045336274, 0.63439328416365), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.88192126434835, 0.47139673682600), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.95694033573221, 0.29028467725446), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(-0.99518472667220, 0.09801714032956), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.99879545620517, 0.04906767432742), std::complex<dfloat>(0.99518472667220, 0.09801714032956), std::complex<dfloat>(0.98917650996478, 0.14673047445536), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.97003125319454, 0.24298017990326), std::complex<dfloat>(0.95694033573221, 0.29028467725446), std::complex<dfloat>(0.94154406518302, 0.33688985339222), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.90398929312344, 0.42755509343028), std::complex<dfloat>(0.88192126434836, 0.47139673682600), std::complex<dfloat>(0.85772861000027, 0.51410274419322), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.80320753148064, 0.59569930449243), std::complex<dfloat>(0.77301045336274, 0.63439328416365), std::complex<dfloat>(0.74095112535496, 0.67155895484702), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.67155895484702, 0.74095112535496), std::complex<dfloat>(0.63439328416365, 0.77301045336274), std::complex<dfloat>(0.59569930449243, 0.80320753148064), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.51410274419322, 0.85772861000027), std::complex<dfloat>(0.47139673682600, 0.88192126434836), std::complex<dfloat>(0.42755509343028, 0.90398929312344), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.33688985339222, 0.94154406518302), std::complex<dfloat>(0.29028467725446, 0.95694033573221), std::complex<dfloat>(0.24298017990326, 0.97003125319454), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.14673047445536, 0.98917650996478), std::complex<dfloat>(0.09801714032956, 0.99518472667220), std::complex<dfloat>(0.04906767432742, 0.99879545620517), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.04906767432742, 0.99879545620517), std::complex<dfloat>(-0.09801714032956, 0.99518472667220), std::complex<dfloat>(-0.14673047445536, 0.98917650996478), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.24298017990326, 0.97003125319454), std::complex<dfloat>(-0.29028467725446, 0.95694033573221), std::complex<dfloat>(-0.33688985339222, 0.94154406518302), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.42755509343028, 0.90398929312344), std::complex<dfloat>(-0.47139673682600, 0.88192126434836), std::complex<dfloat>(-0.51410274419322, 0.85772861000027), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.59569930449243, 0.80320753148064), std::complex<dfloat>(-0.63439328416365, 0.77301045336274), std::complex<dfloat>(-0.67155895484702, 0.74095112535496), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.74095112535496, 0.67155895484702), std::complex<dfloat>(-0.77301045336274, 0.63439328416365), std::complex<dfloat>(-0.80320753148064, 0.59569930449243), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.85772861000027, 0.51410274419322), std::complex<dfloat>(-0.88192126434835, 0.47139673682600), std::complex<dfloat>(-0.90398929312344, 0.42755509343028), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.94154406518302, 0.33688985339222), std::complex<dfloat>(-0.95694033573221, 0.29028467725446), std::complex<dfloat>(-0.97003125319454, 0.24298017990326), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(-0.98917650996478, 0.14673047445536), std::complex<dfloat>(-0.99518472667220, 0.09801714032956), std::complex<dfloat>(-0.99879545620517, 0.04906767432742), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.99969881869620, 0.02454122852291), std::complex<dfloat>(0.99879545620517, 0.04906767432742), std::complex<dfloat>(0.99729045667869, 0.07356456359967), std::complex<dfloat>(0.99518472667220, 0.09801714032956), std::complex<dfloat>(0.99247953459871, 0.12241067519922), std::complex<dfloat>(0.98917650996478, 0.14673047445536), std::complex<dfloat>(0.98527764238894, 0.17096188876030), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.97570213003853, 0.21910124015687), std::complex<dfloat>(0.97003125319454, 0.24298017990326), std::complex<dfloat>(0.96377606579544, 0.26671275747490), std::complex<dfloat>(0.95694033573221, 0.29028467725446), std::complex<dfloat>(0.94952818059304, 0.31368174039889), std::complex<dfloat>(0.94154406518302, 0.33688985339222), std::complex<dfloat>(0.93299279883474, 0.35989503653499), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.91420975570353, 0.40524131400499), std::complex<dfloat>(0.90398929312344, 0.42755509343028), std::complex<dfloat>(0.89322430119552, 0.44961132965461), std::complex<dfloat>(0.88192126434836, 0.47139673682600), std::complex<dfloat>(0.87008699110871, 0.49289819222978), std::complex<dfloat>(0.85772861000027, 0.51410274419322), std::complex<dfloat>(0.84485356524971, 0.53499761988710), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.81758481315158, 0.57580819141785), std::complex<dfloat>(0.80320753148064, 0.59569930449243), std::complex<dfloat>(0.78834642762661, 0.61523159058063), std::complex<dfloat>(0.77301045336274, 0.63439328416365), std::complex<dfloat>(0.75720884650648, 0.65317284295378), std::complex<dfloat>(0.74095112535496, 0.67155895484702), std::complex<dfloat>(0.72424708295147, 0.68954054473707), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.68954054473707, 0.72424708295147), std::complex<dfloat>(0.67155895484702, 0.74095112535496), std::complex<dfloat>(0.65317284295378, 0.75720884650648), std::complex<dfloat>(0.63439328416365, 0.77301045336274), std::complex<dfloat>(0.61523159058063, 0.78834642762661), std::complex<dfloat>(0.59569930449243, 0.80320753148064), std::complex<dfloat>(0.57580819141785, 0.81758481315158), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.53499761988710, 0.84485356524971), std::complex<dfloat>(0.51410274419322, 0.85772861000027), std::complex<dfloat>(0.49289819222978, 0.87008699110871), std::complex<dfloat>(0.47139673682600, 0.88192126434836), std::complex<dfloat>(0.44961132965461, 0.89322430119552), std::complex<dfloat>(0.42755509343028, 0.90398929312344), std::complex<dfloat>(0.40524131400499, 0.91420975570353), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.35989503653499, 0.93299279883474), std::complex<dfloat>(0.33688985339222, 0.94154406518302), std::complex<dfloat>(0.31368174039889, 0.94952818059304), std::complex<dfloat>(0.29028467725446, 0.95694033573221), std::complex<dfloat>(0.26671275747490, 0.96377606579544), std::complex<dfloat>(0.24298017990326, 0.97003125319454), std::complex<dfloat>(0.21910124015687, 0.97570213003853), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.17096188876030, 0.98527764238894), std::complex<dfloat>(0.14673047445536, 0.98917650996478), std::complex<dfloat>(0.12241067519922, 0.99247953459871), std::complex<dfloat>(0.09801714032956, 0.99518472667220), std::complex<dfloat>(0.07356456359967, 0.99729045667869), std::complex<dfloat>(0.04906767432742, 0.99879545620517), std::complex<dfloat>(0.02454122852291, 0.99969881869620), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.02454122852291, 0.99969881869620), std::complex<dfloat>(-0.04906767432742, 0.99879545620517), std::complex<dfloat>(-0.07356456359967, 0.99729045667869), std::complex<dfloat>(-0.09801714032956, 0.99518472667220), std::complex<dfloat>(-0.12241067519922, 0.99247953459871), std::complex<dfloat>(-0.14673047445536, 0.98917650996478), std::complex<dfloat>(-0.17096188876030, 0.98527764238894), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.21910124015687, 0.97570213003853), std::complex<dfloat>(-0.24298017990326, 0.97003125319454), std::complex<dfloat>(-0.26671275747490, 0.96377606579544), std::complex<dfloat>(-0.29028467725446, 0.95694033573221), std::complex<dfloat>(-0.31368174039889, 0.94952818059304), std::complex<dfloat>(-0.33688985339222, 0.94154406518302), std::complex<dfloat>(-0.35989503653499, 0.93299279883474), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.40524131400499, 0.91420975570353), std::complex<dfloat>(-0.42755509343028, 0.90398929312344), std::complex<dfloat>(-0.44961132965461, 0.89322430119552), std::complex<dfloat>(-0.47139673682600, 0.88192126434836), std::complex<dfloat>(-0.49289819222978, 0.87008699110871), std::complex<dfloat>(-0.51410274419322, 0.85772861000027), std::complex<dfloat>(-0.53499761988710, 0.84485356524971), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.57580819141785, 0.81758481315158), std::complex<dfloat>(-0.59569930449243, 0.80320753148064), std::complex<dfloat>(-0.61523159058063, 0.78834642762661), std::complex<dfloat>(-0.63439328416365, 0.77301045336274), std::complex<dfloat>(-0.65317284295378, 0.75720884650648), std::complex<dfloat>(-0.67155895484702, 0.74095112535496), std::complex<dfloat>(-0.68954054473707, 0.72424708295147), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.72424708295147, 0.68954054473707), std::complex<dfloat>(-0.74095112535496, 0.67155895484702), std::complex<dfloat>(-0.75720884650648, 0.65317284295378), std::complex<dfloat>(-0.77301045336274, 0.63439328416365), std::complex<dfloat>(-0.78834642762661, 0.61523159058063), std::complex<dfloat>(-0.80320753148064, 0.59569930449243), std::complex<dfloat>(-0.81758481315158, 0.57580819141785), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.84485356524971, 0.53499761988710), std::complex<dfloat>(-0.85772861000027, 0.51410274419322), std::complex<dfloat>(-0.87008699110871, 0.49289819222978), std::complex<dfloat>(-0.88192126434835, 0.47139673682600), std::complex<dfloat>(-0.89322430119552, 0.44961132965461), std::complex<dfloat>(-0.90398929312344, 0.42755509343028), std::complex<dfloat>(-0.91420975570353, 0.40524131400499), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.93299279883474, 0.35989503653499), std::complex<dfloat>(-0.94154406518302, 0.33688985339222), std::complex<dfloat>(-0.94952818059304, 0.31368174039889), std::complex<dfloat>(-0.95694033573221, 0.29028467725446), std::complex<dfloat>(-0.96377606579544, 0.26671275747490), std::complex<dfloat>(-0.97003125319454, 0.24298017990326), std::complex<dfloat>(-0.97570213003853, 0.21910124015687), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(-0.98527764238894, 0.17096188876030), std::complex<dfloat>(-0.98917650996478, 0.14673047445536), std::complex<dfloat>(-0.99247953459871, 0.12241067519922), std::complex<dfloat>(-0.99518472667220, 0.09801714032956), std::complex<dfloat>(-0.99729045667869, 0.07356456359967), std::complex<dfloat>(-0.99879545620517, 0.04906767432742), std::complex<dfloat>(-0.99969881869620, 0.02454122852291), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.99992470183914, 0.01227153828572), std::complex<dfloat>(0.99969881869620, 0.02454122852291), std::complex<dfloat>(0.99932238458835, 0.03680722294136), std::complex<dfloat>(0.99879545620517, 0.04906767432742), std::complex<dfloat>(0.99811811290015, 0.06132073630221), std::complex<dfloat>(0.99729045667869, 0.07356456359967), std::complex<dfloat>(0.99631261218278, 0.08579731234444), std::complex<dfloat>(0.99518472667220, 0.09801714032956), std::complex<dfloat>(0.99390697000236, 0.11022220729388), std::complex<dfloat>(0.99247953459871, 0.12241067519922), std::complex<dfloat>(0.99090263542778, 0.13458070850713), std::complex<dfloat>(0.98917650996478, 0.14673047445536), std::complex<dfloat>(0.98730141815786, 0.15885814333386), std::complex<dfloat>(0.98527764238894, 0.17096188876030), std::complex<dfloat>(0.98310548743122, 0.18303988795514), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.97831737071963, 0.20711137619222), std::complex<dfloat>(0.97570213003853, 0.21910124015687), std::complex<dfloat>(0.97293995220556, 0.23105810828067), std::complex<dfloat>(0.97003125319454, 0.24298017990326), std::complex<dfloat>(0.96697647104485, 0.25486565960451), std::complex<dfloat>(0.96377606579544, 0.26671275747490), std::complex<dfloat>(0.96043051941557, 0.27851968938505), std::complex<dfloat>(0.95694033573221, 0.29028467725446), std::complex<dfloat>(0.95330604035419, 0.30200594931923), std::complex<dfloat>(0.94952818059304, 0.31368174039889), std::complex<dfloat>(0.94560732538052, 0.32531029216226), std::complex<dfloat>(0.94154406518302, 0.33688985339222), std::complex<dfloat>(0.93733901191257, 0.34841868024943), std::complex<dfloat>(0.93299279883474, 0.35989503653499), std::complex<dfloat>(0.92850608047322, 0.37131719395184), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.91911385169006, 0.39399204006105), std::complex<dfloat>(0.91420975570353, 0.40524131400499), std::complex<dfloat>(0.90916798309052, 0.41642956009764), std::complex<dfloat>(0.90398929312344, 0.42755509343028), std::complex<dfloat>(0.89867446569395, 0.43861623853853), std::complex<dfloat>(0.89322430119552, 0.44961132965461), std::complex<dfloat>(0.88763962040285, 0.46053871095824), std::complex<dfloat>(0.88192126434836, 0.47139673682600), std::complex<dfloat>(0.87607009419541, 0.48218377207912), std::complex<dfloat>(0.87008699110871, 0.49289819222978), std::complex<dfloat>(0.86397285612159, 0.50353838372572), std::complex<dfloat>(0.85772861000027, 0.51410274419322), std::complex<dfloat>(0.85135519310527, 0.52458968267847), std::complex<dfloat>(0.84485356524971, 0.53499761988710), std::complex<dfloat>(0.83822470555484, 0.54532498842205), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.82458930278503, 0.56573181078361), std::complex<dfloat>(0.81758481315158, 0.57580819141785), std::complex<dfloat>(0.81045719825259, 0.58579785745644), std::complex<dfloat>(0.80320753148064, 0.59569930449243), std::complex<dfloat>(0.79583690460888, 0.60551104140433), std::complex<dfloat>(0.78834642762661, 0.61523159058063), std::complex<dfloat>(0.78073722857209, 0.62485948814239), std::complex<dfloat>(0.77301045336274, 0.63439328416365), std::complex<dfloat>(0.76516726562246, 0.64383154288979), std::complex<dfloat>(0.75720884650648, 0.65317284295378), std::complex<dfloat>(0.74913639452346, 0.66241577759017), std::complex<dfloat>(0.74095112535496, 0.67155895484702), std::complex<dfloat>(0.73265427167241, 0.68060099779545), std::complex<dfloat>(0.72424708295147, 0.68954054473707), std::complex<dfloat>(0.71573082528382, 0.69837624940897), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.69837624940897, 0.71573082528382), std::complex<dfloat>(0.68954054473707, 0.72424708295147), std::complex<dfloat>(0.68060099779545, 0.73265427167241), std::complex<dfloat>(0.67155895484702, 0.74095112535496), std::complex<dfloat>(0.66241577759017, 0.74913639452346), std::complex<dfloat>(0.65317284295378, 0.75720884650648), std::complex<dfloat>(0.64383154288979, 0.76516726562246), std::complex<dfloat>(0.63439328416365, 0.77301045336274), std::complex<dfloat>(0.62485948814239, 0.78073722857209), std::complex<dfloat>(0.61523159058063, 0.78834642762661), std::complex<dfloat>(0.60551104140433, 0.79583690460888), std::complex<dfloat>(0.59569930449243, 0.80320753148064), std::complex<dfloat>(0.58579785745644, 0.81045719825259), std::complex<dfloat>(0.57580819141785, 0.81758481315158), std::complex<dfloat>(0.56573181078361, 0.82458930278503), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.54532498842205, 0.83822470555484), std::complex<dfloat>(0.53499761988710, 0.84485356524971), std::complex<dfloat>(0.52458968267847, 0.85135519310527), std::complex<dfloat>(0.51410274419322, 0.85772861000027), std::complex<dfloat>(0.50353838372572, 0.86397285612159), std::complex<dfloat>(0.49289819222978, 0.87008699110871), std::complex<dfloat>(0.48218377207912, 0.87607009419541), std::complex<dfloat>(0.47139673682600, 0.88192126434836), std::complex<dfloat>(0.46053871095824, 0.88763962040285), std::complex<dfloat>(0.44961132965461, 0.89322430119552), std::complex<dfloat>(0.43861623853853, 0.89867446569395), std::complex<dfloat>(0.42755509343028, 0.90398929312344), std::complex<dfloat>(0.41642956009764, 0.90916798309052), std::complex<dfloat>(0.40524131400499, 0.91420975570353), std::complex<dfloat>(0.39399204006105, 0.91911385169006), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.37131719395184, 0.92850608047322), std::complex<dfloat>(0.35989503653499, 0.93299279883474), std::complex<dfloat>(0.34841868024943, 0.93733901191257), std::complex<dfloat>(0.33688985339222, 0.94154406518302), std::complex<dfloat>(0.32531029216226, 0.94560732538052), std::complex<dfloat>(0.31368174039889, 0.94952818059304), std::complex<dfloat>(0.30200594931923, 0.95330604035419), std::complex<dfloat>(0.29028467725446, 0.95694033573221), std::complex<dfloat>(0.27851968938505, 0.96043051941557), std::complex<dfloat>(0.26671275747490, 0.96377606579544), std::complex<dfloat>(0.25486565960451, 0.96697647104485), std::complex<dfloat>(0.24298017990326, 0.97003125319454), std::complex<dfloat>(0.23105810828067, 0.97293995220556), std::complex<dfloat>(0.21910124015687, 0.97570213003853), std::complex<dfloat>(0.20711137619222, 0.97831737071963), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.18303988795514, 0.98310548743122), std::complex<dfloat>(0.17096188876030, 0.98527764238894), std::complex<dfloat>(0.15885814333386, 0.98730141815786), std::complex<dfloat>(0.14673047445536, 0.98917650996478), std::complex<dfloat>(0.13458070850713, 0.99090263542778), std::complex<dfloat>(0.12241067519922, 0.99247953459871), std::complex<dfloat>(0.11022220729388, 0.99390697000236), std::complex<dfloat>(0.09801714032956, 0.99518472667220), std::complex<dfloat>(0.08579731234444, 0.99631261218278), std::complex<dfloat>(0.07356456359967, 0.99729045667869), std::complex<dfloat>(0.06132073630221, 0.99811811290015), std::complex<dfloat>(0.04906767432742, 0.99879545620517), std::complex<dfloat>(0.03680722294136, 0.99932238458835), std::complex<dfloat>(0.02454122852291, 0.99969881869620), std::complex<dfloat>(0.01227153828572, 0.99992470183914), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.01227153828572, 0.99992470183914), std::complex<dfloat>(-0.02454122852291, 0.99969881869620), std::complex<dfloat>(-0.03680722294136, 0.99932238458835), std::complex<dfloat>(-0.04906767432742, 0.99879545620517), std::complex<dfloat>(-0.06132073630221, 0.99811811290015), std::complex<dfloat>(-0.07356456359967, 0.99729045667869), std::complex<dfloat>(-0.08579731234444, 0.99631261218278), std::complex<dfloat>(-0.09801714032956, 0.99518472667220), std::complex<dfloat>(-0.11022220729388, 0.99390697000236), std::complex<dfloat>(-0.12241067519922, 0.99247953459871), std::complex<dfloat>(-0.13458070850713, 0.99090263542778), std::complex<dfloat>(-0.14673047445536, 0.98917650996478), std::complex<dfloat>(-0.15885814333386, 0.98730141815786), std::complex<dfloat>(-0.17096188876030, 0.98527764238894), std::complex<dfloat>(-0.18303988795514, 0.98310548743122), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.20711137619222, 0.97831737071963), std::complex<dfloat>(-0.21910124015687, 0.97570213003853), std::complex<dfloat>(-0.23105810828067, 0.97293995220556), std::complex<dfloat>(-0.24298017990326, 0.97003125319454), std::complex<dfloat>(-0.25486565960451, 0.96697647104485), std::complex<dfloat>(-0.26671275747490, 0.96377606579544), std::complex<dfloat>(-0.27851968938505, 0.96043051941557), std::complex<dfloat>(-0.29028467725446, 0.95694033573221), std::complex<dfloat>(-0.30200594931923, 0.95330604035419), std::complex<dfloat>(-0.31368174039889, 0.94952818059304), std::complex<dfloat>(-0.32531029216226, 0.94560732538052), std::complex<dfloat>(-0.33688985339222, 0.94154406518302), std::complex<dfloat>(-0.34841868024943, 0.93733901191257), std::complex<dfloat>(-0.35989503653499, 0.93299279883474), std::complex<dfloat>(-0.37131719395184, 0.92850608047322), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.39399204006105, 0.91911385169006), std::complex<dfloat>(-0.40524131400499, 0.91420975570353), std::complex<dfloat>(-0.41642956009764, 0.90916798309052), std::complex<dfloat>(-0.42755509343028, 0.90398929312344), std::complex<dfloat>(-0.43861623853853, 0.89867446569395), std::complex<dfloat>(-0.44961132965461, 0.89322430119552), std::complex<dfloat>(-0.46053871095824, 0.88763962040285), std::complex<dfloat>(-0.47139673682600, 0.88192126434836), std::complex<dfloat>(-0.48218377207912, 0.87607009419541), std::complex<dfloat>(-0.49289819222978, 0.87008699110871), std::complex<dfloat>(-0.50353838372572, 0.86397285612159), std::complex<dfloat>(-0.51410274419322, 0.85772861000027), std::complex<dfloat>(-0.52458968267847, 0.85135519310527), std::complex<dfloat>(-0.53499761988710, 0.84485356524971), std::complex<dfloat>(-0.54532498842205, 0.83822470555484), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.56573181078361, 0.82458930278503), std::complex<dfloat>(-0.57580819141785, 0.81758481315158), std::complex<dfloat>(-0.58579785745644, 0.81045719825259), std::complex<dfloat>(-0.59569930449243, 0.80320753148064), std::complex<dfloat>(-0.60551104140433, 0.79583690460888), std::complex<dfloat>(-0.61523159058063, 0.78834642762661), std::complex<dfloat>(-0.62485948814239, 0.78073722857209), std::complex<dfloat>(-0.63439328416365, 0.77301045336274), std::complex<dfloat>(-0.64383154288979, 0.76516726562246), std::complex<dfloat>(-0.65317284295378, 0.75720884650648), std::complex<dfloat>(-0.66241577759017, 0.74913639452346), std::complex<dfloat>(-0.67155895484702, 0.74095112535496), std::complex<dfloat>(-0.68060099779545, 0.73265427167241), std::complex<dfloat>(-0.68954054473707, 0.72424708295147), std::complex<dfloat>(-0.69837624940897, 0.71573082528382), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.71573082528382, 0.69837624940897), std::complex<dfloat>(-0.72424708295147, 0.68954054473707), std::complex<dfloat>(-0.73265427167241, 0.68060099779545), std::complex<dfloat>(-0.74095112535496, 0.67155895484702), std::complex<dfloat>(-0.74913639452346, 0.66241577759017), std::complex<dfloat>(-0.75720884650648, 0.65317284295378), std::complex<dfloat>(-0.76516726562246, 0.64383154288979), std::complex<dfloat>(-0.77301045336274, 0.63439328416365), std::complex<dfloat>(-0.78073722857209, 0.62485948814239), std::complex<dfloat>(-0.78834642762661, 0.61523159058063), std::complex<dfloat>(-0.79583690460888, 0.60551104140433), std::complex<dfloat>(-0.80320753148064, 0.59569930449243), std::complex<dfloat>(-0.81045719825259, 0.58579785745644), std::complex<dfloat>(-0.81758481315158, 0.57580819141785), std::complex<dfloat>(-0.82458930278503, 0.56573181078361), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.83822470555484, 0.54532498842205), std::complex<dfloat>(-0.84485356524971, 0.53499761988710), std::complex<dfloat>(-0.85135519310527, 0.52458968267847), std::complex<dfloat>(-0.85772861000027, 0.51410274419322), std::complex<dfloat>(-0.86397285612159, 0.50353838372572), std::complex<dfloat>(-0.87008699110871, 0.49289819222978), std::complex<dfloat>(-0.87607009419541, 0.48218377207912), std::complex<dfloat>(-0.88192126434835, 0.47139673682600), std::complex<dfloat>(-0.88763962040285, 0.46053871095824), std::complex<dfloat>(-0.89322430119552, 0.44961132965461), std::complex<dfloat>(-0.89867446569395, 0.43861623853853), std::complex<dfloat>(-0.90398929312344, 0.42755509343028), std::complex<dfloat>(-0.90916798309052, 0.41642956009764), std::complex<dfloat>(-0.91420975570353, 0.40524131400499), std::complex<dfloat>(-0.91911385169006, 0.39399204006105), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.92850608047322, 0.37131719395184), std::complex<dfloat>(-0.93299279883474, 0.35989503653499), std::complex<dfloat>(-0.93733901191257, 0.34841868024943), std::complex<dfloat>(-0.94154406518302, 0.33688985339222), std::complex<dfloat>(-0.94560732538052, 0.32531029216226), std::complex<dfloat>(-0.94952818059304, 0.31368174039889), std::complex<dfloat>(-0.95330604035419, 0.30200594931923), std::complex<dfloat>(-0.95694033573221, 0.29028467725446), std::complex<dfloat>(-0.96043051941557, 0.27851968938505), std::complex<dfloat>(-0.96377606579544, 0.26671275747490), std::complex<dfloat>(-0.96697647104485, 0.25486565960451), std::complex<dfloat>(-0.97003125319454, 0.24298017990326), std::complex<dfloat>(-0.97293995220556, 0.23105810828067), std::complex<dfloat>(-0.97570213003853, 0.21910124015687), std::complex<dfloat>(-0.97831737071963, 0.20711137619222), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(-0.98310548743122, 0.18303988795514), std::complex<dfloat>(-0.98527764238894, 0.17096188876030), std::complex<dfloat>(-0.98730141815786, 0.15885814333386), std::complex<dfloat>(-0.98917650996478, 0.14673047445536), std::complex<dfloat>(-0.99090263542778, 0.13458070850713), std::complex<dfloat>(-0.99247953459871, 0.12241067519922), std::complex<dfloat>(-0.99390697000236, 0.11022220729388), std::complex<dfloat>(-0.99518472667220, 0.09801714032956), std::complex<dfloat>(-0.99631261218278, 0.08579731234444), std::complex<dfloat>(-0.99729045667869, 0.07356456359967), std::complex<dfloat>(-0.99811811290015, 0.06132073630221), std::complex<dfloat>(-0.99879545620517, 0.04906767432742), std::complex<dfloat>(-0.99932238458835, 0.03680722294136), std::complex<dfloat>(-0.99969881869620, 0.02454122852291), std::complex<dfloat>(-0.99992470183914, 0.01227153828572), std::complex<dfloat>(1.00000000000000, -0.00000000000000), std::complex<dfloat>(0.99998117528260, 0.00613588464915), std::complex<dfloat>(0.99992470183914, 0.01227153828572), std::complex<dfloat>(0.99983058179582, 0.01840672990580), std::complex<dfloat>(0.99969881869620, 0.02454122852291), std::complex<dfloat>(0.99952941750109, 0.03067480317664), std::complex<dfloat>(0.99932238458835, 0.03680722294136), std::complex<dfloat>(0.99907772775265, 0.04293825693494), std::complex<dfloat>(0.99879545620517, 0.04906767432742), std::complex<dfloat>(0.99847558057329, 0.05519524434969), std::complex<dfloat>(0.99811811290015, 0.06132073630221), std::complex<dfloat>(0.99772306664419, 0.06744391956366), std::complex<dfloat>(0.99729045667869, 0.07356456359967), std::complex<dfloat>(0.99682029929117, 0.07968243797143), std::complex<dfloat>(0.99631261218278, 0.08579731234444), std::complex<dfloat>(0.99576741446766, 0.09190895649713), std::complex<dfloat>(0.99518472667220, 0.09801714032956), std::complex<dfloat>(0.99456457073426, 0.10412163387205), std::complex<dfloat>(0.99390697000236, 0.11022220729388), std::complex<dfloat>(0.99321194923479, 0.11631863091190), std::complex<dfloat>(0.99247953459871, 0.12241067519922), std::complex<dfloat>(0.99170975366910, 0.12849811079379), std::complex<dfloat>(0.99090263542778, 0.13458070850713), std::complex<dfloat>(0.99005821026230, 0.14065823933285), std::complex<dfloat>(0.98917650996478, 0.14673047445536), std::complex<dfloat>(0.98825756773075, 0.15279718525844), std::complex<dfloat>(0.98730141815786, 0.15885814333386), std::complex<dfloat>(0.98630809724460, 0.16491312048997), std::complex<dfloat>(0.98527764238894, 0.17096188876030), std::complex<dfloat>(0.98421009238693, 0.17700422041215), std::complex<dfloat>(0.98310548743122, 0.18303988795514), std::complex<dfloat>(0.98196386910956, 0.18906866414981), std::complex<dfloat>(0.98078528040323, 0.19509032201613), std::complex<dfloat>(0.97956976568544, 0.20110463484209), std::complex<dfloat>(0.97831737071963, 0.20711137619222), std::complex<dfloat>(0.97702814265775, 0.21311031991609), std::complex<dfloat>(0.97570213003853, 0.21910124015687), std::complex<dfloat>(0.97433938278558, 0.22508391135979), std::complex<dfloat>(0.97293995220556, 0.23105810828067), std::complex<dfloat>(0.97150389098625, 0.23702360599437), std::complex<dfloat>(0.97003125319454, 0.24298017990326), std::complex<dfloat>(0.96852209427442, 0.24892760574572), std::complex<dfloat>(0.96697647104485, 0.25486565960451), std::complex<dfloat>(0.96539444169769, 0.26079411791528), std::complex<dfloat>(0.96377606579544, 0.26671275747490), std::complex<dfloat>(0.96212140426904, 0.27262135544995), std::complex<dfloat>(0.96043051941557, 0.27851968938505), std::complex<dfloat>(0.95870347489587, 0.28440753721127), std::complex<dfloat>(0.95694033573221, 0.29028467725446), std::complex<dfloat>(0.95514116830577, 0.29615088824362), std::complex<dfloat>(0.95330604035419, 0.30200594931923), std::complex<dfloat>(0.95143502096901, 0.30784964004153), std::complex<dfloat>(0.94952818059304, 0.31368174039889), std::complex<dfloat>(0.94758559101774, 0.31950203081602), std::complex<dfloat>(0.94560732538052, 0.32531029216226), std::complex<dfloat>(0.94359345816196, 0.33110630575988), std::complex<dfloat>(0.94154406518302, 0.33688985339222), std::complex<dfloat>(0.93945922360219, 0.34266071731199), std::complex<dfloat>(0.93733901191257, 0.34841868024943), std::complex<dfloat>(0.93518350993895, 0.35416352542049), std::complex<dfloat>(0.93299279883474, 0.35989503653499), std::complex<dfloat>(0.93076696107898, 0.36561299780477), std::complex<dfloat>(0.92850608047322, 0.37131719395184), std::complex<dfloat>(0.92621024213831, 0.37700741021642), std::complex<dfloat>(0.92387953251129, 0.38268343236509), std::complex<dfloat>(0.92151403934204, 0.38834504669883), std::complex<dfloat>(0.91911385169006, 0.39399204006105), std::complex<dfloat>(0.91667905992104, 0.39962419984565), std::complex<dfloat>(0.91420975570353, 0.40524131400499), std::complex<dfloat>(0.91170603200543, 0.41084317105790), std::complex<dfloat>(0.90916798309052, 0.41642956009764), std::complex<dfloat>(0.90659570451492, 0.42200027079980), std::complex<dfloat>(0.90398929312344, 0.42755509343028), std::complex<dfloat>(0.90134884704602, 0.43309381885315), std::complex<dfloat>(0.89867446569395, 0.43861623853853), std::complex<dfloat>(0.89596624975619, 0.44412214457043), std::complex<dfloat>(0.89322430119552, 0.44961132965461), std::complex<dfloat>(0.89044872324476, 0.45508358712634), std::complex<dfloat>(0.88763962040285, 0.46053871095824), std::complex<dfloat>(0.88479709843094, 0.46597649576797), std::complex<dfloat>(0.88192126434836, 0.47139673682600), std::complex<dfloat>(0.87901222642863, 0.47679923006332), std::complex<dfloat>(0.87607009419541, 0.48218377207912), std::complex<dfloat>(0.87309497841829, 0.48755016014844), std::complex<dfloat>(0.87008699110871, 0.49289819222978), std::complex<dfloat>(0.86704624551569, 0.49822766697278), std::complex<dfloat>(0.86397285612159, 0.50353838372572), std::complex<dfloat>(0.86086693863777, 0.50883014254311), std::complex<dfloat>(0.85772861000027, 0.51410274419322), std::complex<dfloat>(0.85455798836540, 0.51935599016559), std::complex<dfloat>(0.85135519310527, 0.52458968267847), std::complex<dfloat>(0.84812034480330, 0.52980362468629), std::complex<dfloat>(0.84485356524971, 0.53499761988710), std::complex<dfloat>(0.84155497743690, 0.54017147272989), std::complex<dfloat>(0.83822470555484, 0.54532498842205), std::complex<dfloat>(0.83486287498638, 0.55045797293660), std::complex<dfloat>(0.83146961230255, 0.55557023301960), std::complex<dfloat>(0.82804504525776, 0.56066157619734), std::complex<dfloat>(0.82458930278503, 0.56573181078361), std::complex<dfloat>(0.82110251499110, 0.57078074588697), std::complex<dfloat>(0.81758481315158, 0.57580819141785), std::complex<dfloat>(0.81403632970595, 0.58081395809576), std::complex<dfloat>(0.81045719825259, 0.58579785745644), std::complex<dfloat>(0.80684755354380, 0.59075970185887), std::complex<dfloat>(0.80320753148064, 0.59569930449243), std::complex<dfloat>(0.79953726910791, 0.60061647938387), std::complex<dfloat>(0.79583690460888, 0.60551104140433), std::complex<dfloat>(0.79210657730021, 0.61038280627631), std::complex<dfloat>(0.78834642762661, 0.61523159058063), std::complex<dfloat>(0.78455659715558, 0.62005721176329), std::complex<dfloat>(0.78073722857209, 0.62485948814239), std::complex<dfloat>(0.77688846567323, 0.62963823891493), std::complex<dfloat>(0.77301045336274, 0.63439328416365), std::complex<dfloat>(0.76910333764558, 0.63912444486378), std::complex<dfloat>(0.76516726562246, 0.64383154288979), std::complex<dfloat>(0.76120238548426, 0.64851440102211), std::complex<dfloat>(0.75720884650648, 0.65317284295378), std::complex<dfloat>(0.75318679904361, 0.65780669329708), std::complex<dfloat>(0.74913639452346, 0.66241577759017), std::complex<dfloat>(0.74505778544147, 0.66699992230364), std::complex<dfloat>(0.74095112535496, 0.67155895484702), std::complex<dfloat>(0.73681656887737, 0.67609270357532), std::complex<dfloat>(0.73265427167241, 0.68060099779545), std::complex<dfloat>(0.72846439044823, 0.68508366777270), std::complex<dfloat>(0.72424708295147, 0.68954054473707), std::complex<dfloat>(0.72000250796138, 0.69397146088965), std::complex<dfloat>(0.71573082528382, 0.69837624940897), std::complex<dfloat>(0.71143219574522, 0.70275474445723), std::complex<dfloat>(0.70710678118655, 0.70710678118655), std::complex<dfloat>(0.70275474445723, 0.71143219574522), std::complex<dfloat>(0.69837624940897, 0.71573082528382), std::complex<dfloat>(0.69397146088965, 0.72000250796138), std::complex<dfloat>(0.68954054473707, 0.72424708295147), std::complex<dfloat>(0.68508366777270, 0.72846439044823), std::complex<dfloat>(0.68060099779545, 0.73265427167241), std::complex<dfloat>(0.67609270357532, 0.73681656887737), std::complex<dfloat>(0.67155895484702, 0.74095112535496), std::complex<dfloat>(0.66699992230364, 0.74505778544147), std::complex<dfloat>(0.66241577759017, 0.74913639452346), std::complex<dfloat>(0.65780669329708, 0.75318679904361), std::complex<dfloat>(0.65317284295378, 0.75720884650648), std::complex<dfloat>(0.64851440102211, 0.76120238548426), std::complex<dfloat>(0.64383154288979, 0.76516726562246), std::complex<dfloat>(0.63912444486378, 0.76910333764558), std::complex<dfloat>(0.63439328416365, 0.77301045336274), std::complex<dfloat>(0.62963823891493, 0.77688846567323), std::complex<dfloat>(0.62485948814239, 0.78073722857209), std::complex<dfloat>(0.62005721176329, 0.78455659715558), std::complex<dfloat>(0.61523159058063, 0.78834642762661), std::complex<dfloat>(0.61038280627631, 0.79210657730021), std::complex<dfloat>(0.60551104140433, 0.79583690460888), std::complex<dfloat>(0.60061647938387, 0.79953726910791), std::complex<dfloat>(0.59569930449243, 0.80320753148064), std::complex<dfloat>(0.59075970185887, 0.80684755354380), std::complex<dfloat>(0.58579785745644, 0.81045719825259), std::complex<dfloat>(0.58081395809576, 0.81403632970595), std::complex<dfloat>(0.57580819141785, 0.81758481315158), std::complex<dfloat>(0.57078074588697, 0.82110251499110), std::complex<dfloat>(0.56573181078361, 0.82458930278503), std::complex<dfloat>(0.56066157619734, 0.82804504525776), std::complex<dfloat>(0.55557023301960, 0.83146961230255), std::complex<dfloat>(0.55045797293660, 0.83486287498638), std::complex<dfloat>(0.54532498842205, 0.83822470555484), std::complex<dfloat>(0.54017147272989, 0.84155497743690), std::complex<dfloat>(0.53499761988710, 0.84485356524971), std::complex<dfloat>(0.52980362468629, 0.84812034480330), std::complex<dfloat>(0.52458968267847, 0.85135519310527), std::complex<dfloat>(0.51935599016559, 0.85455798836540), std::complex<dfloat>(0.51410274419322, 0.85772861000027), std::complex<dfloat>(0.50883014254311, 0.86086693863777), std::complex<dfloat>(0.50353838372572, 0.86397285612159), std::complex<dfloat>(0.49822766697278, 0.86704624551569), std::complex<dfloat>(0.49289819222978, 0.87008699110871), std::complex<dfloat>(0.48755016014844, 0.87309497841829), std::complex<dfloat>(0.48218377207912, 0.87607009419541), std::complex<dfloat>(0.47679923006332, 0.87901222642863), std::complex<dfloat>(0.47139673682600, 0.88192126434836), std::complex<dfloat>(0.46597649576797, 0.88479709843094), std::complex<dfloat>(0.46053871095824, 0.88763962040285), std::complex<dfloat>(0.45508358712634, 0.89044872324476), std::complex<dfloat>(0.44961132965461, 0.89322430119552), std::complex<dfloat>(0.44412214457043, 0.89596624975619), std::complex<dfloat>(0.43861623853853, 0.89867446569395), std::complex<dfloat>(0.43309381885315, 0.90134884704602), std::complex<dfloat>(0.42755509343028, 0.90398929312344), std::complex<dfloat>(0.42200027079980, 0.90659570451492), std::complex<dfloat>(0.41642956009764, 0.90916798309052), std::complex<dfloat>(0.41084317105790, 0.91170603200543), std::complex<dfloat>(0.40524131400499, 0.91420975570353), std::complex<dfloat>(0.39962419984565, 0.91667905992104), std::complex<dfloat>(0.39399204006105, 0.91911385169006), std::complex<dfloat>(0.38834504669883, 0.92151403934204), std::complex<dfloat>(0.38268343236509, 0.92387953251129), std::complex<dfloat>(0.37700741021642, 0.92621024213831), std::complex<dfloat>(0.37131719395184, 0.92850608047322), std::complex<dfloat>(0.36561299780477, 0.93076696107898), std::complex<dfloat>(0.35989503653499, 0.93299279883474), std::complex<dfloat>(0.35416352542049, 0.93518350993895), std::complex<dfloat>(0.34841868024943, 0.93733901191257), std::complex<dfloat>(0.34266071731199, 0.93945922360219), std::complex<dfloat>(0.33688985339222, 0.94154406518302), std::complex<dfloat>(0.33110630575988, 0.94359345816196), std::complex<dfloat>(0.32531029216226, 0.94560732538052), std::complex<dfloat>(0.31950203081602, 0.94758559101774), std::complex<dfloat>(0.31368174039889, 0.94952818059304), std::complex<dfloat>(0.30784964004153, 0.95143502096901), std::complex<dfloat>(0.30200594931923, 0.95330604035419), std::complex<dfloat>(0.29615088824362, 0.95514116830577), std::complex<dfloat>(0.29028467725446, 0.95694033573221), std::complex<dfloat>(0.28440753721127, 0.95870347489587), std::complex<dfloat>(0.27851968938505, 0.96043051941557), std::complex<dfloat>(0.27262135544995, 0.96212140426904), std::complex<dfloat>(0.26671275747490, 0.96377606579544), std::complex<dfloat>(0.26079411791528, 0.96539444169769), std::complex<dfloat>(0.25486565960451, 0.96697647104485), std::complex<dfloat>(0.24892760574572, 0.96852209427442), std::complex<dfloat>(0.24298017990326, 0.97003125319454), std::complex<dfloat>(0.23702360599437, 0.97150389098625), std::complex<dfloat>(0.23105810828067, 0.97293995220556), std::complex<dfloat>(0.22508391135979, 0.97433938278558), std::complex<dfloat>(0.21910124015687, 0.97570213003853), std::complex<dfloat>(0.21311031991609, 0.97702814265775), std::complex<dfloat>(0.20711137619222, 0.97831737071963), std::complex<dfloat>(0.20110463484209, 0.97956976568544), std::complex<dfloat>(0.19509032201613, 0.98078528040323), std::complex<dfloat>(0.18906866414981, 0.98196386910956), std::complex<dfloat>(0.18303988795514, 0.98310548743122), std::complex<dfloat>(0.17700422041215, 0.98421009238693), std::complex<dfloat>(0.17096188876030, 0.98527764238894), std::complex<dfloat>(0.16491312048997, 0.98630809724460), std::complex<dfloat>(0.15885814333386, 0.98730141815786), std::complex<dfloat>(0.15279718525844, 0.98825756773075), std::complex<dfloat>(0.14673047445536, 0.98917650996478), std::complex<dfloat>(0.14065823933285, 0.99005821026230), std::complex<dfloat>(0.13458070850713, 0.99090263542778), std::complex<dfloat>(0.12849811079379, 0.99170975366910), std::complex<dfloat>(0.12241067519922, 0.99247953459871), std::complex<dfloat>(0.11631863091190, 0.99321194923479), std::complex<dfloat>(0.11022220729388, 0.99390697000236), std::complex<dfloat>(0.10412163387205, 0.99456457073426), std::complex<dfloat>(0.09801714032956, 0.99518472667220), std::complex<dfloat>(0.09190895649713, 0.99576741446766), std::complex<dfloat>(0.08579731234444, 0.99631261218278), std::complex<dfloat>(0.07968243797143, 0.99682029929117), std::complex<dfloat>(0.07356456359967, 0.99729045667869), std::complex<dfloat>(0.06744391956366, 0.99772306664419), std::complex<dfloat>(0.06132073630221, 0.99811811290015), std::complex<dfloat>(0.05519524434969, 0.99847558057329), std::complex<dfloat>(0.04906767432742, 0.99879545620517), std::complex<dfloat>(0.04293825693494, 0.99907772775265), std::complex<dfloat>(0.03680722294136, 0.99932238458835), std::complex<dfloat>(0.03067480317664, 0.99952941750109), std::complex<dfloat>(0.02454122852291, 0.99969881869620), std::complex<dfloat>(0.01840672990580, 0.99983058179582), std::complex<dfloat>(0.01227153828572, 0.99992470183914), std::complex<dfloat>(0.00613588464915, 0.99998117528260), std::complex<dfloat>(0.00000000000000, 1.00000000000000), std::complex<dfloat>(-0.00613588464915, 0.99998117528260), std::complex<dfloat>(-0.01227153828572, 0.99992470183914), std::complex<dfloat>(-0.01840672990580, 0.99983058179582), std::complex<dfloat>(-0.02454122852291, 0.99969881869620), std::complex<dfloat>(-0.03067480317664, 0.99952941750109), std::complex<dfloat>(-0.03680722294136, 0.99932238458835), std::complex<dfloat>(-0.04293825693494, 0.99907772775265), std::complex<dfloat>(-0.04906767432742, 0.99879545620517), std::complex<dfloat>(-0.05519524434969, 0.99847558057329), std::complex<dfloat>(-0.06132073630221, 0.99811811290015), std::complex<dfloat>(-0.06744391956366, 0.99772306664419), std::complex<dfloat>(-0.07356456359967, 0.99729045667869), std::complex<dfloat>(-0.07968243797143, 0.99682029929117), std::complex<dfloat>(-0.08579731234444, 0.99631261218278), std::complex<dfloat>(-0.09190895649713, 0.99576741446766), std::complex<dfloat>(-0.09801714032956, 0.99518472667220), std::complex<dfloat>(-0.10412163387205, 0.99456457073426), std::complex<dfloat>(-0.11022220729388, 0.99390697000236), std::complex<dfloat>(-0.11631863091190, 0.99321194923479), std::complex<dfloat>(-0.12241067519922, 0.99247953459871), std::complex<dfloat>(-0.12849811079379, 0.99170975366910), std::complex<dfloat>(-0.13458070850713, 0.99090263542778), std::complex<dfloat>(-0.14065823933285, 0.99005821026230), std::complex<dfloat>(-0.14673047445536, 0.98917650996478), std::complex<dfloat>(-0.15279718525844, 0.98825756773075), std::complex<dfloat>(-0.15885814333386, 0.98730141815786), std::complex<dfloat>(-0.16491312048997, 0.98630809724460), std::complex<dfloat>(-0.17096188876030, 0.98527764238894), std::complex<dfloat>(-0.17700422041215, 0.98421009238693), std::complex<dfloat>(-0.18303988795514, 0.98310548743122), std::complex<dfloat>(-0.18906866414981, 0.98196386910956), std::complex<dfloat>(-0.19509032201613, 0.98078528040323), std::complex<dfloat>(-0.20110463484209, 0.97956976568544), std::complex<dfloat>(-0.20711137619222, 0.97831737071963), std::complex<dfloat>(-0.21311031991609, 0.97702814265775), std::complex<dfloat>(-0.21910124015687, 0.97570213003853), std::complex<dfloat>(-0.22508391135979, 0.97433938278558), std::complex<dfloat>(-0.23105810828067, 0.97293995220556), std::complex<dfloat>(-0.23702360599437, 0.97150389098625), std::complex<dfloat>(-0.24298017990326, 0.97003125319454), std::complex<dfloat>(-0.24892760574572, 0.96852209427442), std::complex<dfloat>(-0.25486565960451, 0.96697647104485), std::complex<dfloat>(-0.26079411791528, 0.96539444169769), std::complex<dfloat>(-0.26671275747490, 0.96377606579544), std::complex<dfloat>(-0.27262135544995, 0.96212140426904), std::complex<dfloat>(-0.27851968938505, 0.96043051941557), std::complex<dfloat>(-0.28440753721127, 0.95870347489587), std::complex<dfloat>(-0.29028467725446, 0.95694033573221), std::complex<dfloat>(-0.29615088824362, 0.95514116830577), std::complex<dfloat>(-0.30200594931923, 0.95330604035419), std::complex<dfloat>(-0.30784964004153, 0.95143502096901), std::complex<dfloat>(-0.31368174039889, 0.94952818059304), std::complex<dfloat>(-0.31950203081602, 0.94758559101774), std::complex<dfloat>(-0.32531029216226, 0.94560732538052), std::complex<dfloat>(-0.33110630575988, 0.94359345816196), std::complex<dfloat>(-0.33688985339222, 0.94154406518302), std::complex<dfloat>(-0.34266071731199, 0.93945922360219), std::complex<dfloat>(-0.34841868024943, 0.93733901191257), std::complex<dfloat>(-0.35416352542049, 0.93518350993895), std::complex<dfloat>(-0.35989503653499, 0.93299279883474), std::complex<dfloat>(-0.36561299780477, 0.93076696107898), std::complex<dfloat>(-0.37131719395184, 0.92850608047322), std::complex<dfloat>(-0.37700741021642, 0.92621024213831), std::complex<dfloat>(-0.38268343236509, 0.92387953251129), std::complex<dfloat>(-0.38834504669883, 0.92151403934204), std::complex<dfloat>(-0.39399204006105, 0.91911385169006), std::complex<dfloat>(-0.39962419984565, 0.91667905992104), std::complex<dfloat>(-0.40524131400499, 0.91420975570353), std::complex<dfloat>(-0.41084317105790, 0.91170603200543), std::complex<dfloat>(-0.41642956009764, 0.90916798309052), std::complex<dfloat>(-0.42200027079980, 0.90659570451492), std::complex<dfloat>(-0.42755509343028, 0.90398929312344), std::complex<dfloat>(-0.43309381885315, 0.90134884704602), std::complex<dfloat>(-0.43861623853853, 0.89867446569395), std::complex<dfloat>(-0.44412214457043, 0.89596624975619), std::complex<dfloat>(-0.44961132965461, 0.89322430119552), std::complex<dfloat>(-0.45508358712634, 0.89044872324476), std::complex<dfloat>(-0.46053871095824, 0.88763962040285), std::complex<dfloat>(-0.46597649576797, 0.88479709843094), std::complex<dfloat>(-0.47139673682600, 0.88192126434836), std::complex<dfloat>(-0.47679923006332, 0.87901222642863), std::complex<dfloat>(-0.48218377207912, 0.87607009419541), std::complex<dfloat>(-0.48755016014844, 0.87309497841829), std::complex<dfloat>(-0.49289819222978, 0.87008699110871), std::complex<dfloat>(-0.49822766697278, 0.86704624551569), std::complex<dfloat>(-0.50353838372572, 0.86397285612159), std::complex<dfloat>(-0.50883014254311, 0.86086693863777), std::complex<dfloat>(-0.51410274419322, 0.85772861000027), std::complex<dfloat>(-0.51935599016559, 0.85455798836540), std::complex<dfloat>(-0.52458968267847, 0.85135519310527), std::complex<dfloat>(-0.52980362468629, 0.84812034480330), std::complex<dfloat>(-0.53499761988710, 0.84485356524971), std::complex<dfloat>(-0.54017147272989, 0.84155497743690), std::complex<dfloat>(-0.54532498842205, 0.83822470555484), std::complex<dfloat>(-0.55045797293660, 0.83486287498638), std::complex<dfloat>(-0.55557023301960, 0.83146961230255), std::complex<dfloat>(-0.56066157619734, 0.82804504525776), std::complex<dfloat>(-0.56573181078361, 0.82458930278503), std::complex<dfloat>(-0.57078074588697, 0.82110251499110), std::complex<dfloat>(-0.57580819141785, 0.81758481315158), std::complex<dfloat>(-0.58081395809576, 0.81403632970595), std::complex<dfloat>(-0.58579785745644, 0.81045719825259), std::complex<dfloat>(-0.59075970185887, 0.80684755354380), std::complex<dfloat>(-0.59569930449243, 0.80320753148064), std::complex<dfloat>(-0.60061647938387, 0.79953726910791), std::complex<dfloat>(-0.60551104140433, 0.79583690460888), std::complex<dfloat>(-0.61038280627631, 0.79210657730021), std::complex<dfloat>(-0.61523159058063, 0.78834642762661), std::complex<dfloat>(-0.62005721176329, 0.78455659715558), std::complex<dfloat>(-0.62485948814239, 0.78073722857209), std::complex<dfloat>(-0.62963823891493, 0.77688846567323), std::complex<dfloat>(-0.63439328416365, 0.77301045336274), std::complex<dfloat>(-0.63912444486378, 0.76910333764558), std::complex<dfloat>(-0.64383154288979, 0.76516726562246), std::complex<dfloat>(-0.64851440102211, 0.76120238548426), std::complex<dfloat>(-0.65317284295378, 0.75720884650648), std::complex<dfloat>(-0.65780669329708, 0.75318679904361), std::complex<dfloat>(-0.66241577759017, 0.74913639452346), std::complex<dfloat>(-0.66699992230364, 0.74505778544147), std::complex<dfloat>(-0.67155895484702, 0.74095112535496), std::complex<dfloat>(-0.67609270357532, 0.73681656887737), std::complex<dfloat>(-0.68060099779545, 0.73265427167241), std::complex<dfloat>(-0.68508366777270, 0.72846439044823), std::complex<dfloat>(-0.68954054473707, 0.72424708295147), std::complex<dfloat>(-0.69397146088965, 0.72000250796138), std::complex<dfloat>(-0.69837624940897, 0.71573082528382), std::complex<dfloat>(-0.70275474445723, 0.71143219574522), std::complex<dfloat>(-0.70710678118655, 0.70710678118655), std::complex<dfloat>(-0.71143219574522, 0.70275474445723), std::complex<dfloat>(-0.71573082528382, 0.69837624940897), std::complex<dfloat>(-0.72000250796138, 0.69397146088965), std::complex<dfloat>(-0.72424708295147, 0.68954054473707), std::complex<dfloat>(-0.72846439044823, 0.68508366777270), std::complex<dfloat>(-0.73265427167241, 0.68060099779545), std::complex<dfloat>(-0.73681656887737, 0.67609270357532), std::complex<dfloat>(-0.74095112535496, 0.67155895484702), std::complex<dfloat>(-0.74505778544147, 0.66699992230364), std::complex<dfloat>(-0.74913639452346, 0.66241577759017), std::complex<dfloat>(-0.75318679904361, 0.65780669329708), std::complex<dfloat>(-0.75720884650648, 0.65317284295378), std::complex<dfloat>(-0.76120238548426, 0.64851440102211), std::complex<dfloat>(-0.76516726562246, 0.64383154288979), std::complex<dfloat>(-0.76910333764558, 0.63912444486378), std::complex<dfloat>(-0.77301045336274, 0.63439328416365), std::complex<dfloat>(-0.77688846567323, 0.62963823891493), std::complex<dfloat>(-0.78073722857209, 0.62485948814239), std::complex<dfloat>(-0.78455659715558, 0.62005721176329), std::complex<dfloat>(-0.78834642762661, 0.61523159058063), std::complex<dfloat>(-0.79210657730021, 0.61038280627631), std::complex<dfloat>(-0.79583690460888, 0.60551104140433), std::complex<dfloat>(-0.79953726910791, 0.60061647938387), std::complex<dfloat>(-0.80320753148064, 0.59569930449243), std::complex<dfloat>(-0.80684755354380, 0.59075970185887), std::complex<dfloat>(-0.81045719825259, 0.58579785745644), std::complex<dfloat>(-0.81403632970595, 0.58081395809576), std::complex<dfloat>(-0.81758481315158, 0.57580819141785), std::complex<dfloat>(-0.82110251499110, 0.57078074588697), std::complex<dfloat>(-0.82458930278503, 0.56573181078361), std::complex<dfloat>(-0.82804504525776, 0.56066157619734), std::complex<dfloat>(-0.83146961230255, 0.55557023301960), std::complex<dfloat>(-0.83486287498638, 0.55045797293660), std::complex<dfloat>(-0.83822470555484, 0.54532498842205), std::complex<dfloat>(-0.84155497743690, 0.54017147272989), std::complex<dfloat>(-0.84485356524971, 0.53499761988710), std::complex<dfloat>(-0.84812034480330, 0.52980362468629), std::complex<dfloat>(-0.85135519310527, 0.52458968267847), std::complex<dfloat>(-0.85455798836540, 0.51935599016559), std::complex<dfloat>(-0.85772861000027, 0.51410274419322), std::complex<dfloat>(-0.86086693863777, 0.50883014254311), std::complex<dfloat>(-0.86397285612159, 0.50353838372572), std::complex<dfloat>(-0.86704624551569, 0.49822766697278), std::complex<dfloat>(-0.87008699110871, 0.49289819222978), std::complex<dfloat>(-0.87309497841829, 0.48755016014844), std::complex<dfloat>(-0.87607009419541, 0.48218377207912), std::complex<dfloat>(-0.87901222642863, 0.47679923006332), std::complex<dfloat>(-0.88192126434835, 0.47139673682600), std::complex<dfloat>(-0.88479709843094, 0.46597649576797), std::complex<dfloat>(-0.88763962040285, 0.46053871095824), std::complex<dfloat>(-0.89044872324476, 0.45508358712634), std::complex<dfloat>(-0.89322430119552, 0.44961132965461), std::complex<dfloat>(-0.89596624975619, 0.44412214457043), std::complex<dfloat>(-0.89867446569395, 0.43861623853853), std::complex<dfloat>(-0.90134884704602, 0.43309381885315), std::complex<dfloat>(-0.90398929312344, 0.42755509343028), std::complex<dfloat>(-0.90659570451492, 0.42200027079980), std::complex<dfloat>(-0.90916798309052, 0.41642956009764), std::complex<dfloat>(-0.91170603200543, 0.41084317105790), std::complex<dfloat>(-0.91420975570353, 0.40524131400499), std::complex<dfloat>(-0.91667905992104, 0.39962419984565), std::complex<dfloat>(-0.91911385169006, 0.39399204006105), std::complex<dfloat>(-0.92151403934204, 0.38834504669883), std::complex<dfloat>(-0.92387953251129, 0.38268343236509), std::complex<dfloat>(-0.92621024213831, 0.37700741021642), std::complex<dfloat>(-0.92850608047322, 0.37131719395184), std::complex<dfloat>(-0.93076696107898, 0.36561299780477), std::complex<dfloat>(-0.93299279883474, 0.35989503653499), std::complex<dfloat>(-0.93518350993895, 0.35416352542049), std::complex<dfloat>(-0.93733901191257, 0.34841868024943), std::complex<dfloat>(-0.93945922360219, 0.34266071731199), std::complex<dfloat>(-0.94154406518302, 0.33688985339222), std::complex<dfloat>(-0.94359345816196, 0.33110630575988), std::complex<dfloat>(-0.94560732538052, 0.32531029216226), std::complex<dfloat>(-0.94758559101774, 0.31950203081602), std::complex<dfloat>(-0.94952818059304, 0.31368174039889), std::complex<dfloat>(-0.95143502096901, 0.30784964004153), std::complex<dfloat>(-0.95330604035419, 0.30200594931923), std::complex<dfloat>(-0.95514116830577, 0.29615088824362), std::complex<dfloat>(-0.95694033573221, 0.29028467725446), std::complex<dfloat>(-0.95870347489587, 0.28440753721127), std::complex<dfloat>(-0.96043051941557, 0.27851968938505), std::complex<dfloat>(-0.96212140426904, 0.27262135544995), std::complex<dfloat>(-0.96377606579544, 0.26671275747490), std::complex<dfloat>(-0.96539444169769, 0.26079411791528), std::complex<dfloat>(-0.96697647104485, 0.25486565960451), std::complex<dfloat>(-0.96852209427442, 0.24892760574572), std::complex<dfloat>(-0.97003125319454, 0.24298017990326), std::complex<dfloat>(-0.97150389098625, 0.23702360599437), std::complex<dfloat>(-0.97293995220556, 0.23105810828067), std::complex<dfloat>(-0.97433938278558, 0.22508391135979), std::complex<dfloat>(-0.97570213003853, 0.21910124015687), std::complex<dfloat>(-0.97702814265775, 0.21311031991609), std::complex<dfloat>(-0.97831737071963, 0.20711137619222), std::complex<dfloat>(-0.97956976568544, 0.20110463484209), std::complex<dfloat>(-0.98078528040323, 0.19509032201613), std::complex<dfloat>(-0.98196386910956, 0.18906866414981), std::complex<dfloat>(-0.98310548743122, 0.18303988795514), std::complex<dfloat>(-0.98421009238693, 0.17700422041215), std::complex<dfloat>(-0.98527764238894, 0.17096188876030), std::complex<dfloat>(-0.98630809724460, 0.16491312048997), std::complex<dfloat>(-0.98730141815786, 0.15885814333386), std::complex<dfloat>(-0.98825756773075, 0.15279718525844), std::complex<dfloat>(-0.98917650996478, 0.14673047445536), std::complex<dfloat>(-0.99005821026230, 0.14065823933285), std::complex<dfloat>(-0.99090263542778, 0.13458070850713), std::complex<dfloat>(-0.99170975366910, 0.12849811079379), std::complex<dfloat>(-0.99247953459871, 0.12241067519922), std::complex<dfloat>(-0.99321194923479, 0.11631863091190), std::complex<dfloat>(-0.99390697000236, 0.11022220729388), std::complex<dfloat>(-0.99456457073426, 0.10412163387205), std::complex<dfloat>(-0.99518472667220, 0.09801714032956), std::complex<dfloat>(-0.99576741446766, 0.09190895649713), std::complex<dfloat>(-0.99631261218278, 0.08579731234444), std::complex<dfloat>(-0.99682029929117, 0.07968243797143), std::complex<dfloat>(-0.99729045667869, 0.07356456359967), std::complex<dfloat>(-0.99772306664419, 0.06744391956366), std::complex<dfloat>(-0.99811811290015, 0.06132073630221), std::complex<dfloat>(-0.99847558057329, 0.05519524434969), std::complex<dfloat>(-0.99879545620517, 0.04906767432742), std::complex<dfloat>(-0.99907772775265, 0.04293825693494), std::complex<dfloat>(-0.99932238458835, 0.03680722294136), std::complex<dfloat>(-0.99952941750109, 0.03067480317664), std::complex<dfloat>(-0.99969881869620, 0.02454122852291), std::complex<dfloat>(-0.99983058179582, 0.01840672990580), std::complex<dfloat>(-0.99992470183914, 0.01227153828572), std::complex<dfloat>(-0.99998117528260, 0.00613588464915) };
	static constexpr std::array<std::complex<dfloat>, 4> M = { std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(-1.0, -1.2246468e-16) };
	static constexpr std::array<std::complex<dfloat>, 4> M_i = { std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(1.0, 0.0), std::complex<dfloat>(-1.0, +1.2246468e-16) };
	static constexpr std::array<dfloat, 257> PCS = { 1.0,1.02158247,1.04307498,1.06438842,1.08543547,1.10613138 ,1.12639488,1.14614901,1.16532188,1.18384745,1.20166621,1.21872583 ,1.23498164,1.25039708,1.26494402,1.27860285,1.29136256,1.30322058 ,1.31418252,1.32426173,1.33347871,1.34186053,1.34943997,1.35625472 ,1.36234647,1.36776001,1.37254232,1.37674164,1.38040668,1.38358581 ,1.38632639,1.38867418,1.39067281,1.3923634,1.39378429,1.39497082 ,1.39595521,1.39676658,1.39743094,1.39797134,1.39840799,1.39875845 ,1.39903785,1.3992591,1.39943311,1.39956903,1.39967448,1.39975573 ,1.39981789,1.39986513,1.39990078,1.39992749,1.39994736,1.39996205 ,1.39997282,1.39998067,1.39998634,1.39999042,1.39999333,1.39999538 ,1.39999683,1.39999784,1.39999853,1.39999901,1.39999934,1.39999956 ,1.39999971,1.39999981,1.39999988,1.39999992,1.39999995,1.39999997 ,1.39999998,1.39999999,1.39999999,1.39999999,1.39999999,1.39999999 ,1.39999998,1.39999997,1.39999996,1.39999994,1.3999999,1.39999985 ,1.39999978,1.39999967,1.39999951,1.39999927,1.39999894,1.39999846 ,1.39999777,1.39999681,1.39999546,1.39999359,1.39999101,1.39998748 ,1.39998269,1.39997624,1.39996761,1.39995615,1.39994104,1.39992127 ,1.39989559,1.39986249,1.39982011,1.39976626,1.39969832,1.39961324 ,1.39950746,1.39937689,1.39921688,1.3990222,1.39878705,1.39850503 ,1.39816924,1.39777227,1.39730633,1.39676332,1.39613497,1.39541304 ,1.39458943,1.39365645,1.392607,1.39143478,1.39013457,1.38870237 ,1.38713567,1.38543355,1.38359687,1.3816283,1.37953237,1.37731545 ,1.37498561,1.3725525,1.37002712,1.3674215,1.36474839,1.36202093 ,1.3592522,1.35645483,1.35364066,1.35082031,1.34800289,1.34519573 ,1.34240418,1.33963152,1.33687887,1.33414533,1.33142809,1.32872268 ,1.32602327,1.32332305,1.32061466,1.31789061,1.31514377,1.31236775 ,1.30955736,1.30670894,1.30382064,1.30089263,1.29792721,1.29492883 ,1.29190398,1.28886106,1.28581007,1.28276229,1.27972988,1.27672544 ,1.27376151,1.27085011,1.26800229,1.26522769,1.26253412,1.25992733 ,1.25741067,1.254985,1.2526486,1.25039721,1.24822415,1.24612049 ,1.24407538,1.24207638,1.24010986,1.23816147,1.23621658,1.23426079 ,1.23228041,1.23026288,1.22819724,1.22607444,1.2238877,1.2216327 ,1.21930773,1.21691381,1.2144546,1.21193633,1.20936761,1.20675917 ,1.20412349,1.20147447,1.19882699,1.19619641,1.19359817,1.1910473 ,1.18855798,1.1861431,1.18381396,1.18157988,1.17944799,1.17742303 ,1.17550721,1.17370016,1.17199898,1.17039823,1.16889014,1.16746475 ,1.16611013,1.1648127,1.16355743,1.16232827,1.16110842,1.1598807 ,1.15862792,1.15733325,1.15598059,1.15455485,1.15304237,1.15143118 ,1.14971126,1.14787482,1.14591642,1.14383318,1.14162476,1.13929343 ,1.13684398,1.13428355,1.13162144,1.1288688,1.12603833,1.12314383 ,1.12019977,1.11722084,1.11422149,1.1112154,1.10821512,1.1052316 ,1.10227392,1.09934897,1.09646131,1.09361311,1.09080411,1.08803177 ,1.08529152,1.08257697,1.07988036,1.07719298,1.07719298 };

	//working memory - must be prefilled for first iterations to be correct
	std::array<dfloat, 384> buffer = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 192> entropy_unmasked = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 192> entropy_smoothed = { static_cast<dfloat>(0.0) };

	std::array<dint, 192> entropy_thresholded = { 0 };
	std::array<dfloat, 257> logit_distribution = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 257 * 3> logit_three_distribution = { static_cast<dfloat>(0.0) }; //maximum size possible
	std::array<dfloat, 3 * 257> temp_3bins = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 257>temp_last_bin = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 192> temp_192 = { static_cast<dfloat>(0.0) };
	int result = 0;
	std::array<std::array<dfloat, 512>, 192> windowed_Sx = { {{static_cast<dfloat>(0.0)}} };
	std::array<dfloat, 257 * 192> non_zero_data;
	std::array<dfloat, 257 * 192> abs_diff;
	//holding memory for radix rfft functions
	std::array<std::array<std::complex<dfloat>, 256>, 2> X_stage_0 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 128>, 4> X_stage_1 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 64>, 8> X_stage_2 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 32>, 16> X_stage_3 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 16>, 32> X_stage_4 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 8>, 64> X_stage_5 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 4>, 128> X_stage_6 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 2>, 256> X_stage_7 = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 1>, 512> X_stage_8 = { {{static_cast<dfloat>(0.0)}} };
	//std::array<dfloat, 8192 + 384> last = { static_cast<dfloat>(0.0) };

	std::array<dfloat, 257> non_nan_data;
	std::array<dfloat, 257> abs_diff1d;
	static constexpr dint SECTION_SIZE = 8192;
	static constexpr dint TOTAL_SECTIONS = 3;

	dfloat mult, mult_1 = 1.0;
	dfloat min_val, max_val = static_cast<dfloat>(0.0);
	dfloat atd_temp, ent_max, sum_X, sum_Y, sum_XY, squareSum_X, squareSum_Y, corr,man_global,atd_global,t,min_,max_ = static_cast<dfloat>(0.0);
	dfloat initial, multiplier, MAXIMUM, MAXIMUM_3 = static_cast<dfloat>(0.0);
	dfloat dx, v = static_cast<dfloat>(0.0);
	dint flag = 0, count = 0; //sample_rate = 48000, N_FFT = 512,
	dfloat CONST_1 = static_cast<dfloat>(0.057), CONST_last = static_cast<dfloat>(0.057);
	dint NBINS_1 = 37, NBINS_last = 0;
	bool silence = true;
	bool silence_1 = true;


	static constexpr dint TIME_PAD = 13;
	static constexpr dint FREQ_PAD = 3;

	std::array<dfloat, 512> temp_512 = { static_cast<dfloat>(0.0) };
	std::array<std::array<std::complex<dfloat>, 257>, 192> stft_complex = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 257>, 64> stft_output = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 257>, 64> stft_zeros = { {{static_cast<dfloat>(0.0)}} };


	std::array<std::complex<dfloat>, 512> temp_complex_512 = { {static_cast<dfloat>(0.0) } };
	std::array<std::complex<dfloat>, 512> twiddle_products = { {static_cast<dfloat>(0.0) } };

	std::array<std::complex<dfloat>, 257> temp_complex = { {static_cast<dfloat>(0.0) } };
	std::array<dfloat, 257> temp_257 = { static_cast<dfloat>(0.0) };

	std::array<dfloat, (TIME_PAD * 2) + 192> holder218 = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 25087> audio_padded = { static_cast<dfloat>(0.0) };
	std::array<dfloat, 8192 * 3> audio = { static_cast<dfloat>(0.0) };

	std::array<std::array<std::complex<dfloat>, 257>, 192> logit_buffer = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<std::complex<dfloat>, 257>, 64> hann_buffer = { {{static_cast<dfloat>(0.0)}} };

	std::array<std::array<dfloat, 257>, 192> stft_real = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<dfloat, 257>, 192> smoothed = { {{static_cast<dfloat>(0.0)}} };

	std::array<std::array<dfloat, 257>, 192> previous = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<dfloat, (FREQ_PAD * 2) + 257>, (TIME_PAD * 2) + 192 > vertical = { {{static_cast<dfloat>(0.0)}} };
	std::array<std::array<dfloat, (FREQ_PAD * 2) + 257>, (TIME_PAD * 2) + 192> horizontal = { {{static_cast<dfloat>(0.0)}} };
	//note this is not completely equivalent to same mode convolve. we pad extra and we conserve the products of the smoothing outwards until the end.
	std::array<dfloat, (FREQ_PAD * 2) + 257> frequencywise_storage = { static_cast<dfloat>(0.0) };
	/// <summary>
	/// name is a misnomer, it finds the ATD + the man.
	/// The MAN is an attempt to improve over MAD, ATD in like measure.
	/// Both empirically determined by someone with high school level algebra retention.
	/// </summary>
	/// <param name="data"></param>
	/// <returns></returns>
	/// 
	inline void atd(std::array<dfloat, 257>& data, dfloat& man, dfloat &atd) {
		abs_diff1d.fill({ 0.0 });

		non_nan_data.fill({ 0.0 });
		double sum = 0.0;
		int n = 0;
		for (dint i = 0; i < NBINS_last; i++) {
			abs_diff1d[i] = std::pow((std::abs(data[i] - man)), 2.0);
		}

		for (dint i = 0; i < NBINS_last; i++) {
			if (!std::isnan(abs_diff1d[i])) {
				sum += abs_diff1d[i];
				n++;

			}
		}
		if (n == 0) {
			atd = 0.0;
		}
		atd = std::sqrt(sum / static_cast<dfloat>(n));
	}


	inline void man(std::array<dfloat, 257>& data, dfloat& man) {
		non_nan_data.fill({ 0.0 });
		abs_diff1d.fill({ 0.0 });

		dint n = 0;

		// Exclude NaN values from data
		for (dint i = 0; i < NBINS_last; i++) {
			if (!std::isnan(data[i]) && (data[i] != 0.0)) {
				non_nan_data[n] = data[i];
				n++;
			}
		}

		// If non_nan_data is empty, return 0.0 early
		if (n == 0) {
			man = 0.0;
		}

		// Compute the median of non_nan_data
		if (n == non_nan_data.size()) {
			std::sort(non_nan_data.begin(), non_nan_data.end());
		}
		else {
			std::sort(non_nan_data.begin(), non_nan_data.begin() + n);
		}
		dfloat t = (n % 2 == 0) ? (non_nan_data[n / 2] + non_nan_data[(n / 2) - 1]) / static_cast<dfloat>(2.0) : non_nan_data[n / 2];
		// Compute the absolute difference between data and t
		for (dint i = 0; i < NBINS_last; i++) {
			abs_diff1d[i] = std::abs(data[i] - t);
		}
		// Compute the median of the absolute difference
		std::sort(abs_diff1d.begin(), abs_diff1d.begin() + n);
		dfloat median = (n % 2 == 0) ? (abs_diff1d[n / 2] + abs_diff1d[(n / 2) - 1]) / static_cast<dfloat>(2.0) : abs_diff1d[n / 2];

		man = median;
	};

	inline void man_2d(std::array<std::array<dfloat, 257>, 192>& data, dfloat& median_diff) {
		non_zero_data.fill({ static_cast<dfloat>(0.0) });
		abs_diff.fill({ static_cast<dfloat>(0.0) });


		dint n = 0;
		for (dint j = 0; j < data.size(); j++) {
			for (dint i = 0; i < NBINS_last; i++) {
				dfloat val = data[j][i];
				if (val != 0.0) {
					non_zero_data[n] = val;
					n++;
				}
			}
		}
		if (n == 0) {
			return;
		}
		std::sort(non_zero_data.begin(), non_zero_data.begin() + n);
		dfloat median = (n % 2 == 0) ? (non_zero_data[n / 2] + non_zero_data[(n / 2) - 1]) / 2.0 : non_zero_data[n / 2];
		for (dint i = 0; i < n; i++) {
			abs_diff[i] = std::abs(non_zero_data[i] - median);
		}
		std::sort(abs_diff.begin(), abs_diff.begin() + n);

		median_diff = (n % 2 == 0) ? (abs_diff[n / 2] + abs_diff[(n / 2) - 1]) / 2.0 : abs_diff[n / 2];
	}

	/// <summary>
	/// Finds the ATD statistical measure and then adds the mean to it. Works over a 2d, instead of a 1d data.
	/// </summary>
	/// <param name="data"></param>
	/// <param name="threshold"></param>
	inline void atd_2d(std::array<std::array<dfloat, 257>, 192>& data, dfloat& man, dfloat& threshold) {
		dfloat sum_squares = 0.0;

		for (dint j = 0; j < data.size(); j++) {
			for (dint i = 0; i < NBINS_last; i++) {
				dfloat val = std::abs(data[j][i] - man);
				sum_squares += val * val;
			}
		}

		threshold = std::sqrt(sum_squares / static_cast<dfloat>(NBINS_last * data.size())) - man;
	};

	/// <summary>
	/// Finds the maximum value in the array slice delineated by NBINS
	/// </summary>
	/// <param name="data"> the data to consider</param>
	/// <param name="maximum">the place to put the output</param>
	inline void find_max(const std::array<std::array<dfloat, 257>, 192>& data, dfloat& maximum) {
		for (dint j = 0; j < 192; j++) {
			for (dint i = 0; i < NBINS_last; i++) {
				if (data[j][i] > maximum) {
					maximum = data[j][i];
				}
			}
		}
	}
	inline void find_min(const std::array<std::array<dfloat, 257>, 192>& data, dfloat& maximum) {
		for (dint j = 0; j < 192; j++) {
			for (dint i = 0; i < NBINS_last; i++) {
				if (data[j][i] < maximum) {
					maximum = data[j][i];
				}
			}
		}
	}

	/// <summary>
	/// Takes into consideration the NBINS and provides(plausibly) the pearson coefficient for N = NBINS.
	/// </summary>
	/// <param name="X"></param>
	/// <param name="Y"></param>
	/// <returns></returns>

	inline dfloat correlationCoefficient(const std::array<dfloat, 257>& X, const std::array<dfloat, 257>& Y) {
		sum_X = std::accumulate(X.begin(), X.begin() + NBINS_last, static_cast<dfloat>(0.0));
		sum_Y = std::accumulate(Y.begin(), Y.begin() + NBINS_last, static_cast<dfloat>(0.0));
		sum_XY = std::inner_product(X.begin(), X.begin() + NBINS_last, Y.begin(), static_cast<dfloat>(0.0));
		squareSum_X = std::inner_product(X.begin(), X.begin() + NBINS_last, X.begin(), static_cast<dfloat>(0.0));
		squareSum_Y = std::inner_product(Y.begin(), Y.begin() + NBINS_last, Y.begin(), static_cast<dfloat>(0.0));

		corr = (NBINS_last * sum_XY - sum_X * sum_Y) /
			std::sqrt((NBINS_last * squareSum_X - sum_X * sum_X) *
				(NBINS_last * squareSum_Y - sum_Y * sum_Y));

		return corr;
	}
	inline dfloat correlationCoefficient_3(const std::array<dfloat, 257 * 3>& X, const std::array<dfloat, 257 * 3>& Y) {
		sum_X = std::accumulate(X.begin(), X.begin() + NBINS_last * 3, static_cast<dfloat>(0.0));
		sum_Y = std::accumulate(Y.begin(), Y.begin() + NBINS_last * 3, static_cast<dfloat>(0.0));
		sum_XY = std::inner_product(X.begin(), X.begin() + NBINS_last * 3, Y.begin(), static_cast<dfloat>(0.0));
		squareSum_X = std::inner_product(X.begin(), X.begin() + NBINS_last * 3, X.begin(), static_cast<dfloat>(0.0));
		squareSum_Y = std::inner_product(Y.begin(), Y.begin() + NBINS_last * 3, Y.begin(), static_cast<dfloat>(0.0));

		corr = ((NBINS_last * 3) * sum_XY - sum_X * sum_Y) /
			std::sqrt(((NBINS_last * 3) * squareSum_X - sum_X * sum_X) *
				((NBINS_last * 3) * squareSum_Y - sum_Y * sum_Y));

		return corr;
	}



	/// <summary>
	/// Generates a logistic distribution with the endpodints substituted for the odd reflection
	/// </summary>
	inline void generate_true_logistic() {
		logit_distribution.fill({ 0.0 });
		if (NBINS_last < 4) {
			return; //note: we don't generate logistics smaller than four podints
		}
		for (dint i = 0; i < NBINS_last; i++) {
			logit_distribution[i] = static_cast<dfloat>(i) / (NBINS_last - 1);
		}
		for (dint i = 1; i < NBINS_last - 1; i++) {
			logit_distribution[i] /= 1 - logit_distribution[i];
			logit_distribution[i] = std::log(logit_distribution[i]);
		}
		logit_distribution[NBINS_last - 1] = (2 * logit_distribution[NBINS_last - 2]) - logit_distribution[NBINS_last - 3];
		logit_distribution[0] = -logit_distribution[NBINS_last - 1];

		// dinterpolate the elements in logit to between 0 and 1
		min_val = logit_distribution[0];
		max_val = logit_distribution[NBINS_last - 1];
		for (dint i = 0; i < NBINS_last; i++) {
			logit_distribution[i] = (logit_distribution[i] - min_val) / (max_val - min_val);
		}

	}
	inline void generate_true_logistic_3() {
		logit_three_distribution.fill({ 0.0 });
		if (3 * NBINS_last < 4) {
			return; //note: we don't generate logistics smaller than four podints
		}

		for (dint i = 0; i < 3 * NBINS_last; i++) {
			logit_three_distribution[i] = static_cast<dfloat>(i) / (3 * NBINS_last - 1);
		}
		for (dint i = 1; i < 3 * NBINS_last - 1; i++) {
			logit_three_distribution[i] /= 1 - logit_three_distribution[i];
			logit_three_distribution[i] = std::log(logit_three_distribution[i]);
		}
		logit_three_distribution[3 * NBINS_last - 1] = (2 * logit_three_distribution[3 * NBINS_last - 2]) - logit_three_distribution[3 * NBINS_last - 3];
		logit_three_distribution[0] = -logit_three_distribution[3 * NBINS_last - 1];

		// dinterpolate the elements in logit_three to between 0 and 1
		min_val = logit_three_distribution[0];
		max_val = logit_three_distribution[3 * NBINS_last - 1];
		for (dint i = 0; i < 3 * NBINS_last; i++) {
			logit_three_distribution[i] = (logit_three_distribution[i] - min_val) / (max_val - min_val);
		}
	}


	/// <summary>
	/// Produces the "estimated maximum not-noise" where 1 value is 1 and all the rest are zero.
	/// Think of this in a graph space- you have your logistic which is like a flipped sigmoid,
	/// and you have your beta which is a strong indicator of data. The most unlike our wandering line is a right angle.
	/// </summary>
	inline void determine_entropy_maximum() {
		temp_257.fill({ 0 });
		temp_257[NBINS_last - 1] = 1.0;
		MAXIMUM = 1.0 - correlationCoefficient(temp_257, logit_distribution);
	}
	inline void determine_entropy_maximum_3() {
		temp_3bins.fill({ 0 });
		temp_3bins[(NBINS_last * 3) - 1] = 1.0;
		MAXIMUM_3 = 1.0 - correlationCoefficient_3(temp_3bins, logit_three_distribution);
	}

	/// <summary>
	/// Fast Entropy
	/// for each time-segment, sorts, dinterpolates to 0 and 1, and compares a subset of the 
	/// frequency bins(from 0 to NBINS_last), and derives the pearson coefficient for N = the bandpass filter size.
	/// this is then subtracted from 1.
	/// </summary>
	/// <param name="data"></param>
	inline void fast_entropy(std::array<std::array<dfloat, 257>, 192>& data) {

		for (dint i = 1; i < data.size() - 1; i++) {
			for (dint j = 0; j < NBINS_last; j++) {
				temp_3bins[j] = data[i - 1][j];
				temp_3bins[j + NBINS_last] = data[i][j];
				temp_3bins[j + 2 * NBINS_last] = data[i + 1][j];
			}
			std::sort(temp_3bins.begin(), temp_3bins.begin() + NBINS_last * 3);

			dx = temp_3bins[3 * NBINS_last - 1] - temp_3bins[0];
			for (dint j = 0; j < 3 * NBINS_last; j++) {
				temp_3bins[j] = (temp_3bins[j] - temp_3bins[0]) / dx;
			}

			v = correlationCoefficient_3(temp_3bins, logit_three_distribution);
			if (std::isnan(v)) {
				entropy_unmasked[i] = static_cast<dfloat>(0.0);
			}
			else {
				entropy_unmasked[i] = static_cast<dfloat>(1.0) - v;
			}
		}

		// handle edge cases
		temp_last_bin.fill({ static_cast<dfloat>(0.0) });
		for (dint j = 0; j < NBINS_last; j++) {
			temp_last_bin[j] = data[0][j];
		}
		std::sort(temp_last_bin.begin(), temp_last_bin.begin() + NBINS_last);
		dfloat dx = temp_last_bin[NBINS_last - 1] - temp_last_bin[0];
		for (dint j = 0; j < NBINS_last; j++) {
			temp_last_bin[j] = (temp_last_bin[j] - temp_last_bin[0]) / dx;
		}

		dfloat v = correlationCoefficient(temp_last_bin, logit_distribution);
		if (std::isnan(v)) {
			entropy_unmasked[0] = static_cast<dfloat>(0.0);
		}
		else {
			entropy_unmasked[0] = static_cast<dfloat>(1.0) - v;
		}
		temp_last_bin.fill({ static_cast<dfloat>(0.0) });

		for (dint j = 0; j < NBINS_last; j++) {
			temp_last_bin[j] = data[191][j];
		}
		std::sort(temp_last_bin.begin(), temp_last_bin.begin() + NBINS_last);
		dx = temp_last_bin[NBINS_last - 1] - temp_last_bin[0];
		for (dint j = 0; j < NBINS_last; j++) {
			temp_last_bin[j] = (temp_last_bin[j] - temp_last_bin[0]) / dx;
		}

		v = correlationCoefficient(temp_last_bin, logit_distribution);
		if (std::isnan(v)) {
			entropy_unmasked[191] = static_cast<dfloat>(0.0);
		}
		else {
			entropy_unmasked[191] = static_cast<dfloat>(1.0) - v;
		}
	}



	/// <summary>
	/// Fast Peaks
	/// The function iteratively considers the frequency bins in each time-segment of the STFT,
	/// and for each time-segment, independently calculates some statisical measures over the set of bins within the bandpass region,
	/// and combines them with a statistic measured over the entire window, called "t".
	/// Each segment, if the corresponding entropy measurement considers it noise, is not evaluated, but is skipped over.
	/// Each "pixel" in the STFT is then either passed or not passed based on the statistical measure.
	/// It must be noted that all the prototyping was done with python, and without python, good algorithms would never even be invented.
	/// </summary>
	/// <param name="stft_">The input set of values to consider</param>
	/// <param name="mask"> the array to store the product in</param>
	dfloat man_temp = 0.0;
	dfloat thresh_you = 0.0;
	dfloat man_fix = 0.0;
	dfloat atd_fix = 0.0;
	dfloat man_temp_2 = 0.0;
	dfloat atd_temp_2 = 0.0;
	dfloat weight = 0.0;
	dfloat alpha = 0.5;
	inline void fast_peaks(std::array<std::array<dfloat, 257>, 192>& stft_, std::array<std::array<dfloat, 257>, 192>& mask) {
		//for each time bin:
		temp_257.fill({ static_cast<dfloat>(1.0) });
		for (dint each = 0; each < 192; each++) {
			if (entropy_thresholded[each] == 0){
				if(silence ==true){
				continue; //skip the calculations for this row, it's masked already
				//and we dont consider such rows in squelching mode
				}
				if (entropy_unmasked[each] < CONST_last) {
					continue;//try one last chance approach
				}
			}
			//copy out the frequency components
			for (dint j = 0; j < NBINS_last; j++) {
				temp_257[j] = stft_[each][j];
			}
			man(temp_257,man_temp);
			atd(temp_257, man_temp, atd_temp);
			//our range is man to atd + man.
			//so, our range is atd times whatever, plus man.
			atd_temp_2 = atd_global * (1 - (entropy_unmasked[each] / MAXIMUM));
			man_temp_2 = man_global * (1 - (entropy_unmasked[each] / MAXIMUM));
			weight = exp(-alpha * std::abs(man_temp_2 - man_temp));
			man_fix = man_temp * weight + man_temp_2 * (1 - weight);

			weight = exp(-alpha * std::abs(atd_temp_2 - atd_temp));
			atd_fix = atd_temp * weight + atd_temp_2 * (1 - weight);
			thresh_you = man_fix + (atd_fix * mult);
			
			//probablistic higher thresholding-
			//the higher the noise, the lower the threshold

			//set the masking values
			for (dint i = 0; i < NBINS_last; i++) {
				if (temp_257[i] > thresh_you) {
					mask[each][i] = static_cast<dfloat>(1.0);
				}
			}
		}
	};

	/// <summary>
/// performs the radix-2 reverse real fast fourier transform with exact inputs.
///behaves equivalent to numpy's function.
///should be efficient.
/// </summary>
/// <param name="data"></param>
/// <param name="threshold"></param>
	inline void radix_2_irfft(const std::array<std::complex<dfloat>, 257>& input_data, std::array<dfloat, 512>& output_data) {


		for (size_t i = 0; i < 257; ++i) {
			temp_complex_512[i] = input_data[i];
		}
		for (dint i = 1; i < 256; ++i) {
			temp_complex_512[i + 256] = std::conj(input_data[256 - i]);
		}




		for (size_t i = 0; i < 256; ++i) {
			X_stage_0[0][i] = M_i[0] * temp_complex_512[i] + M_i[1] * temp_complex_512[i + 256];
			X_stage_0[1][i] = M_i[2] * temp_complex_512[i] + M_i[3] * temp_complex_512[i + 256];
		}

		dint e = 2;
		dint q = 128;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_0[i][j + q];
			}
		}

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_1[i][j] = X_stage_0[i][j] + twiddle_products[i + j * e];
				X_stage_1[i + e][j] = X_stage_0[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 4;
		q = 64;
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_1[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {

				X_stage_2[i][j] = X_stage_1[i][j] + twiddle_products[i + j * e];
				X_stage_2[i + e][j] = X_stage_1[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 8;
		q = 32;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_2[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {

				X_stage_3[i][j] = X_stage_2[i][j] + twiddle_products[i + j * e];
				X_stage_3[i + e][j] = X_stage_2[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 16;
		q = 16;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_3[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_4[i][j] = X_stage_3[i][j] + twiddle_products[i + j * e];
				X_stage_4[i + e][j] = X_stage_3[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 32;
		q = 8;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_4[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_5[i][j] = X_stage_4[i][j] + twiddle_products[i + j * e];
				X_stage_5[i + e][j] = X_stage_4[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 64;
		q = 4;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_5[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_6[i][j] = X_stage_5[i][j] + twiddle_products[i + j * e];
				X_stage_6[i + e][j] = X_stage_5[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 128;
		q = 2;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_6[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_7[i][j] = X_stage_6[i][j] + twiddle_products[i + j * e];
				X_stage_7[i + e][j] = X_stage_6[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 256;
		q = 1;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = inverse_twiddle_factors[e - 1 + i] * X_stage_7[i][j + q];
			}
		}

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_8[i][j] = X_stage_7[i][j] + twiddle_products[i + j * e];
				X_stage_8[i + e][j] = X_stage_7[i][j] - twiddle_products[i + j * e];
			}
		}

		for (size_t i = 0; i < output_data.size(); ++i) {
			output_data[i] = X_stage_8[i][0].real() / static_cast<dfloat>(512.0);
		}
	};

	/// <summary>
	/// performs the radix-2 forward real fast fourier transform with nyquist podint handling on exact inputs.
	///behaves equivalent to numpy's function.
	///should be efficient.
	/// </summary>
	/// <param name="data"></param>
	/// <param name="threshold"></param>
	inline void radix_2_rfft(const std::array<dfloat, 512>& input_data, std::array<std::complex<dfloat>, 257>& output_data) {


		for (size_t i = 0; i < 256; ++i) {
			X_stage_0[0][i] = M[0] * input_data[i] + M[1] * input_data[i + 256];
			X_stage_0[1][i] = M[2] * input_data[i] + M[3] * input_data[i + 256];
		}

		dint e = 2;
		dint q = 128;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_0[i][j + q];
			}
		}

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_1[i][j] = X_stage_0[i][j] + twiddle_products[i + j * e];
				X_stage_1[i + e][j] = X_stage_0[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 4;
		q = 64;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_1[i][j + q];
			}
		}

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {

				X_stage_2[i][j] = X_stage_1[i][j] + twiddle_products[i + j * e];
				X_stage_2[i + e][j] = X_stage_1[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 8;
		q = 32;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_2[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {

				X_stage_3[i][j] = X_stage_2[i][j] + twiddle_products[i + j * e];
				X_stage_3[i + e][j] = X_stage_2[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 16;
		q = 16;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_3[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_4[i][j] = X_stage_3[i][j] + twiddle_products[i + j * e];
				X_stage_4[i + e][j] = X_stage_3[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 32;
		q = 8;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_4[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_5[i][j] = X_stage_4[i][j] + twiddle_products[i + j * e];
				X_stage_5[i + e][j] = X_stage_4[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 64;
		q = 4;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_5[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_6[i][j] = X_stage_5[i][j] + twiddle_products[i + j * e];
				X_stage_6[i + e][j] = X_stage_5[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 128;
		q = 2;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_6[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_7[i][j] = X_stage_6[i][j] + twiddle_products[i + j * e];
				X_stage_7[i + e][j] = X_stage_6[i][j] - twiddle_products[i + j * e];
			}
		}
		e = 256;
		q = 1;

		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				// Index for storing the product matches the layout of the X_stage arrays
				twiddle_products[i + j * e] = twiddle_factors[e - 1 + i] * X_stage_7[i][j + q];
			}
		}
		for (dint i = 0; i < e; ++i) {
			for (dint j = 0; j < q; ++j) {
				X_stage_8[i][j] = X_stage_7[i][j] + twiddle_products[i + j * e];
				X_stage_8[i + e][j] = X_stage_7[i][j] - twiddle_products[i + j * e];
			}
		}

		// X_stage_8[512//2 + 1,0] = X_stage_8[512//2 + 1,0].real + 0.0j#nyquist handling
		X_stage_8[257][0].imag(static_cast<dfloat>(0.0)); //nyquist is real

		for (size_t i = 0; i <= 256; ++i) {
			output_data[i] = X_stage_8[i][0];
		}
	};
	inline void stft(std::array<dfloat, 8192 * 3>& audio, const std::array<dfloat, 512>& window, std::array<std::array<std::complex<dfloat>, 257>, 192>& out) {
		static constexpr int hop_len = 128;
		static constexpr int n_segs = 192;
		static constexpr int s20 = 256;
		static constexpr int s21 = 256; // Check if n_fft is even or odd, if it's odd, this should be one less


		// audio_padded is initalized elsewhere
		std::copy(audio.begin(), audio.end(), audio_padded.begin() + 256);
		std::reverse_copy(audio.begin() + 1, audio.begin() + 257, audio_padded.begin());
		std::reverse_copy(audio.end() - 256, audio.end() - 1, audio_padded.end() - 255);

		// Segmentation and windowing
		for (int seg = 0; seg < n_segs; seg++) {
			int start = seg * hop_len;

			for (int i = 0; i < s20; i++) {
				windowed_Sx[seg][i] = audio_padded[start + s21 + i];
			}

			// Second half
			for (int i = 0; i < s20; i++) {
				windowed_Sx[seg][i + s20] = audio_padded[start + i];
			}
		}


		// FFT and transpose
		for (int seg = 0; seg < n_segs; seg++) {
			// FFT
			for (int i = 0; i < 256; i++) {
				windowed_Sx[seg][i + 256] *= window[i]; //apply windowing with a shifted window
				windowed_Sx[seg][i] *= window[i + 256];
			}

			radix_2_rfft(windowed_Sx[seg], out[seg]);
			// Transpose to out
		}
	}

	inline void stft_once(const std::array<dfloat, 128>& audio, const std::array<dfloat, 512>& window, std::array<dfloat, 512>& buffer_stft, std::array<std::complex<dfloat>, 257>& out) {

		for (dint i = 0; i < 256; i++) {
			temp_512[i + 256] = buffer_stft[i] * window[i];
			temp_512[i] = buffer_stft[i + 256] * window[i + 256];
		}
		//apply windowing and fftshift in one operation

		std::copy(buffer_stft.begin() + 128, buffer_stft.end(), buffer_stft.begin());
		std::copy(audio.begin(), audio.end(), buffer_stft.begin() + 384);

		radix_2_rfft(temp_512, out);
	}
	std::array<std::array<dfloat, 512>, 64> time_domain_buffer = { {{static_cast<dfloat>(0.0)}} };

	inline void istft(const std::array<std::array<std::complex<dfloat>, 257>, 64>& Sx, const std::array<dfloat, 512>& window, std::array<dfloat, 8192>& output) {
		output.fill({ 0.0 });

		// For each frame
		for (dint frame_idx = 0; frame_idx < 64; ++frame_idx) {
			// Compute inverse FFT
			radix_2_irfft(Sx[frame_idx], time_domain_buffer[frame_idx]);
			// Perform FFT-shift
			for (dint j = 0; j < 256; ++j) {
				std::swap(time_domain_buffer[frame_idx][j], time_domain_buffer[frame_idx][j + 256]);
			}
			// Windowing
			for (dint i = 0; i < 512; ++i) {
				time_domain_buffer[frame_idx][i] *= window[i];
			}
		}

		// Overlap-add

		for (dint frame_idx = 0; frame_idx < 64; ++frame_idx) {
			dint time_idx = frame_idx * 128; // hop_length is 128
			for (dint i = 0; i < 128; ++i) {
				output[time_idx + i] = buffer[i] + time_domain_buffer[frame_idx][i];
			}

			for (dint i = 0; i < 256; ++i) {
				buffer[i] = buffer[i + 128]; // shift out left
			}

			for (dint i = 0; i < 128; ++i) {
				buffer[256 + i] = 0.0;
			}

			for (dint i = 0; i < 384; ++i) {
				buffer[i] += time_domain_buffer[frame_idx][128 + i]; // Add the overlap region for next frame
			}
			time_idx += 128;
		}
	}


	inline void convolve_same_entropy(std::array<dfloat, 204>& in)
	{
		// assumes a kernel size of three and an input of INPUT_SIZE.
		//works with only odd sized kernels- but we only use odd sized kernels so its fine.
		constexpr dint KERNEL_SIZE = 3;
		constexpr dint INPUT_SIZE = 204;
		constexpr dint N_LEFT = KERNEL_SIZE / 2;
		constexpr dint N_RIGHT = KERNEL_SIZE - N_LEFT - 1;
		constexpr std::array<dfloat, 3> kernel = { 1.0, 1.0, 1.0 };


		// Create output array
		// Perform the convolution
		std::array<dfloat, INPUT_SIZE + (KERNEL_SIZE * 2)> ret = {};

		/*
			for i in range(n2 - n_left, n2):
			ret[idx] = innerprod(ap1[:i], ap2[-i:])
			idx += inc
		*/
		// Loop over the first portion of the output, where the filter extends beyond the left edge of the input
		for (dint i = 0; i < N_LEFT; i++) {
			ret[i] = std::inner_product(in.begin(), in.begin() + KERNEL_SIZE - i, kernel.rbegin(), 0.0);
		}
		/*
				for i in range(n1 - n2 + 1):
			ret[idx] = innerprod(ap1[i : i + n2], ap2)
			idx += inc
		*/
		// Loop over the middle portion of the output, where the filter is entirely contained within the input

		for (dint i = 0; i < INPUT_SIZE - KERNEL_SIZE + 1; i++) {
			ret[i + N_LEFT] = std::inner_product(in.begin() + i, in.begin() + i + KERNEL_SIZE, kernel.begin(), 0.0);
		}


		// Loop over the last portion of the output, where the filter extends beyond the right edge of the input
		/*
				for i in range(n2 - 1, n2 - 1 - n_right, -1):
			ret[idx] = innerprod(ap1[-i:], ap2[:i])
			idx += inc

		*/
		for (dint i = INPUT_SIZE - N_RIGHT; i < INPUT_SIZE; i++) {
			dfloat sum = 0.0;
			dint kernel_idx = 0;
			for (dint j = i - KERNEL_SIZE + 1; j <= i; j++) {
				sum += in[j] * kernel[kernel_idx++];
			}
			ret[i] = sum;
		}

		std::copy(ret.begin(), ret.begin() + INPUT_SIZE, in.begin());
	}

	inline void convolve_same_sawtooth(std::array<dfloat, 192 + 60>& in)
	{
		// assumes a kernel size of three and an input of INPUT_SIZE.
		//works with only odd sized kernels- but we only use odd sized kernels so its fine.
		constexpr dint KERNEL_SIZE = 15;
		constexpr dint INPUT_SIZE = 192 + 60;
		constexpr dint N_LEFT = KERNEL_SIZE / 2;
		constexpr dint N_RIGHT = KERNEL_SIZE - N_LEFT - 1;
		constexpr std::array<dfloat, 15> kernel = { 0.0, 0.14285714, 0.28571429, 0.42857143, 0.57142857, 0.71428571, 0.85714286, 1.0, 0.85714286, 0.71428571, 0.57142857, 0.42857143, 0.28571429, 0.14285714, 0.0 };


		// Create output array
		// Perform the convolution
		std::array<dfloat, INPUT_SIZE + (KERNEL_SIZE * 2)> ret = {};

		/*
			for i in range(n2 - n_left, n2):
			ret[idx] = innerprod(ap1[:i], ap2[-i:])
			idx += inc
		*/
		// Loop over the first portion of the output, where the filter extends beyond the left edge of the input
		for (dint i = 0; i < N_LEFT; i++) {
			ret[i] = std::inner_product(in.begin(), in.begin() + KERNEL_SIZE - i, kernel.rbegin(), 0.0);
		}
		/*
				for i in range(n1 - n2 + 1):
			ret[idx] = innerprod(ap1[i : i + n2], ap2)
			idx += inc
		*/
		// Loop over the middle portion of the output, where the filter is entirely contained within the input

		for (dint i = 0; i < INPUT_SIZE - KERNEL_SIZE + 1; i++) {
			ret[i + N_LEFT] = std::inner_product(in.begin() + i, in.begin() + i + KERNEL_SIZE, kernel.begin(), 0.0);
		}


		// Loop over the last portion of the output, where the filter extends beyond the right edge of the input
		/*
				for i in range(n2 - 1, n2 - 1 - n_right, -1):
			ret[idx] = innerprod(ap1[-i:], ap2[:i])
			idx += inc

		*/
		for (dint i = INPUT_SIZE - N_RIGHT; i < INPUT_SIZE; i++) {
			dfloat sum = 0.0;
			dint kernel_idx = 0;
			for (dint j = i - KERNEL_SIZE + 1; j <= i; j++) {
				sum += in[j] * kernel[kernel_idx++];
			}
			ret[i] = sum;
		}

		std::copy(ret.begin(), ret.begin() + INPUT_SIZE, in.begin());
	}

	inline void numpy_entropy_smooth(std::array<dfloat, 192>& in, std::array<dfloat, 192>& out) {
		constexpr dint PADDING_SIZE = 6;
		constexpr dint INPUT_SIZE = 192;

		std::array<dfloat, 192 + PADDING_SIZE * 2> padded = {};
		for (dint i = PADDING_SIZE; i < INPUT_SIZE + PADDING_SIZE; i++) {
			padded[i] = in[i - PADDING_SIZE];
		}
		convolve_same_entropy(padded);

		for (dint i = PADDING_SIZE; i < INPUT_SIZE + PADDING_SIZE; i++) {
			out[i - PADDING_SIZE] = padded[i] / static_cast<dfloat>(3.0);
		}
	}

	inline void numpy_sawtooth_smooth(std::array<dfloat, 192>& in) {
		constexpr dint PADDING_SIZE = 30;
		constexpr dint INPUT_SIZE = 192;

		std::array<dfloat, 192 + PADDING_SIZE * 2> padded = {};
		for (dint i = PADDING_SIZE; i < INPUT_SIZE + PADDING_SIZE; i++) {
			padded[i] = in[i - PADDING_SIZE];
		}
		convolve_same_sawtooth(padded);

		for (dint i = PADDING_SIZE; i < INPUT_SIZE + PADDING_SIZE; i++) {
			in[i - PADDING_SIZE] = padded[i] / static_cast<dfloat>(6.916666666666666666);
		}
	}

	/// <summary>
/// Performs same mode convolution in the time domain using a triangular, symmetric filter of 15 elements,
/// which summarize back to the input *7. The product is then divided by 7 and stored in the output array.
/// we leave the exercise to the reader of improving the efficiency of the behavior here by in-place copying
/// the contents of a 2d array dinto a 1d array(like a ravel or flatten), and then appropriately
/// convolving the 1d, and then copying the contents back out. this will require inserting at least
/// filter size *2 elements between each row in the 1d to allow the tail end of one row not to alter the next.
/// </summary>
/// <param name="stft_real">The input</param>
/// <param name="smoothed">The output</param>
	inline void sawtooth_convolve(std::array<std::array<dfloat, 257>, 192>& stft_real, std::array<std::array<dfloat, 257>, 192>& smoothed) {

		temp_192.fill({ 0.0 });
		for (dint i = 0; i < NBINS_last; i++) {
			for (dint j = 0; j < 192; j++) {
				temp_192[j] = stft_real[j][i];
			}
			numpy_sawtooth_smooth(temp_192);
			for (dint j = 0; j < 192; j++) {
				smoothed[j][i] = temp_192[j];
			}
		}
	}

	inline void convolve_same_frequency(std::array<dfloat, 257 + (FREQ_PAD * 2)>& in)
	{

		constexpr dint KERNEL_SIZE = 3;
		constexpr dint INPUT_SIZE = 257 + (FREQ_PAD * 2);

		constexpr std::array<dfloat, 3> kernel = { static_cast<dfloat>(1.0),static_cast<dfloat>(1.0) ,static_cast<dfloat>(1.0) };

		// Compute the number of left and right elements
		const dint N_LEFT = KERNEL_SIZE / 2;
		const dint N_RIGHT = KERNEL_SIZE - N_LEFT - 1;

		// Create output array
		// Perform the convolution
		std::array<dfloat, INPUT_SIZE + (KERNEL_SIZE * 2)> ret = {};

		/*
			for i in range(n2 - n_left, n2):
			ret[idx] = innerprod(ap1[:i], ap2[-i:])
			idx += inc
		*/
		// Loop over the first portion of the output, where the filter extends beyond the left edge of the input
		for (dint i = 0; i < N_LEFT; i++) {
			ret[i] = std::inner_product(in.begin(), in.begin() + KERNEL_SIZE - i, kernel.rbegin(), 0.0);
		}
		/*
				for i in range(n1 - n2 + 1):
			ret[idx] = innerprod(ap1[i : i + n2], ap2)
			idx += inc
		*/
		// Loop over the middle portion of the output, where the filter is entirely contained within the input

		for (dint i = 0; i < INPUT_SIZE - KERNEL_SIZE + 1; i++) {
			ret[i + N_LEFT] = std::inner_product(in.begin() + i, in.begin() + i + KERNEL_SIZE, kernel.begin(), 0.0);
		}

		// Loop over the last portion of the output, where the filter extends beyond the right edge of the input
		/*
				for i in range(n2 - 1, n2 - 1 - n_right, -1):
			ret[idx] = innerprod(ap1[-i:], ap2[:i])
			idx += inc

		*/
		for (dint i = INPUT_SIZE - N_RIGHT; i < INPUT_SIZE; i++) {
			dfloat sum = 0.0;
			dint kernel_idx = 0;
			for (dint j = i - KERNEL_SIZE + 1; j <= i; j++) {
				sum += in[j] * kernel[kernel_idx++];
			}
			ret[i] = sum;
		}

		std::copy(ret.begin(), ret.begin() + INPUT_SIZE, in.begin());
	}

	inline void convolve_same_time(std::array<dfloat, 192 + (TIME_PAD * 2)>& in)
	{

		constexpr dint KERNEL_SIZE = 13;
		constexpr dint INPUT_SIZE = 192 + (TIME_PAD * 2);
		constexpr std::array<dfloat, 13> kernel = { static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0),  static_cast<dfloat>(1.0) };


		// Compute the number of left and right elements
		const dint N_LEFT = KERNEL_SIZE / 2;
		const dint N_RIGHT = KERNEL_SIZE - N_LEFT - 1;

		// Create output array
		// Perform the convolution
		std::array<dfloat, INPUT_SIZE + (KERNEL_SIZE * 2)> ret = {};

		/*
			for i in range(n2 - n_left, n2):
			ret[idx] = innerprod(ap1[:i], ap2[-i:])
			idx += inc
		*/
		// Loop over the first portion of the output, where the filter extends beyond the left edge of the input
		for (dint i = 0; i < N_LEFT; i++) {
			ret[i] = std::inner_product(in.begin(), in.begin() + KERNEL_SIZE - i, kernel.rbegin(), 0.0);
		}
		/*
				for i in range(n1 - n2 + 1):
			ret[idx] = innerprod(ap1[i : i + n2], ap2)
			idx += inc
		*/
		// Loop over the middle portion of the output, where the filter is entirely contained within the input

		/*for (dint i = 0; i < INPUT_SIZE - KERNEL_SIZE + 1; i++) {
			ret[i + N_LEFT] = std::inner_product(in.begin() + i, in.begin() + i + KERNEL_SIZE, kernel.begin(), 0.0);
		}*/

		for (dint i = 0; i < INPUT_SIZE - KERNEL_SIZE + 1; i++) {
			ret[i + N_LEFT] = std::inner_product(in.begin() + i, in.begin() + i + KERNEL_SIZE, kernel.begin(), 0.0);
		}

		// Loop over the last portion of the output, where the filter extends beyond the right edge of the input
		/*
				for i in range(n2 - 1, n2 - 1 - n_right, -1):
			ret[idx] = innerprod(ap1[-i:], ap2[:i])
			idx += inc

		*/
		for (dint i = INPUT_SIZE - N_RIGHT; i < INPUT_SIZE; i++) {
			dfloat sum = static_cast<dfloat>(0.0);
			dint kernel_idx = static_cast<dint>(0);
			for (dint j = i - KERNEL_SIZE + 1; j <= i; j++) {
				sum += in[j] * kernel[kernel_idx++];
			}
			ret[i] = sum;
		}


		std::copy(ret.begin(), ret.begin() + INPUT_SIZE, in.begin());
	}


	/// <summary>
	/// Finds the longest streak of ones in an array of 192 integers and returns it
	/// </summary>
	/// <param name="nums"></param>
	/// <returns></returns>
	inline dint longestConsecutive(std::array<dint, 192>& nums) {
		dint curr_streak = 0;
		dint prevstreak = 0;
		for (dint i = 0; i < 192; i++) {
			if (nums[i] == 1) {
				curr_streak++;
			}
			else if (nums[i] == 0) {
				if (curr_streak > prevstreak) {
					prevstreak = curr_streak;
				}
				curr_streak = 0;
			}
		}
		return (curr_streak > prevstreak) ? curr_streak : prevstreak;
	}

	/// <summary>
	/// Given the input, finds islands under a certain size and removes spurious discongruities
	/// </summary>
	/// <param name="a"> array to process</param>
	/// <param name="value"> value to replace</param>
	/// <param name="threshold">size of island</param>
	/// <param name="replace"> replacement values</param>
	inline void remove_outliers(std::array<dint, 192>& a, dint value, dint threshold, dint replace) {
		dint first = 0;
		dint end = 0;
		dint index = 0;
		while (first < 192) {
			if (a[first] == value) {
				index = first;
				while (index < 192 && a[index] == value) {
					index += 1;
				}
				end = index;
				if (end - first + 1 < threshold) {
					for (dint i = first; i < end; i++) {
						a[i] = replace;
					}
				}
				first = end;
			}
			else {
				index = first;
				while (index < 192 && a[index] != value) {
					index += 1;
				}
				first = index;
			}
		}
	}

	inline void process_entropy() {

		fast_entropy(stft_real);
		numpy_entropy_smooth(entropy_unmasked, entropy_smoothed);

		entropy_thresholded.fill(0);

		ent_max = static_cast<dfloat>(0.0);


		for (dint i = 0; i < entropy_unmasked.size(); i++) {
			if (entropy_smoothed[i] > ent_max) {
				ent_max = entropy_smoothed[i];
			}
		}



		for (dint i = 0; i < entropy_unmasked.size(); i++) {
			if (entropy_smoothed[i] > CONST_last) {
				entropy_thresholded[i] = 1;
				if ((i > 31) && (i < 161)) { //same thing as numpy slice of [32:128+32].. right?
					count++;
				}
			}
		}

		if ((count > 22 || longestConsecutive(entropy_thresholded) > 16)) {
			flag = 2;
			remove_outliers(entropy_thresholded, 0, 6, 1);
			remove_outliers(entropy_thresholded, 1, 2, 0);
		}
		count = 0;
	};

	inline void convolve_2d(std::array<std::array<dfloat, 257>, 192>& previous, std::array<std::array<dfloat, 257>, 192>& next) {

		vertical.fill({ 0.0 }); //clear corner padding
		horizontal.fill({ 0.0 });

		for (dint i = 0; i < previous.size(); i++) {
			for (dint j = 0; j < previous[0].size(); j++) {
				//apply the mask
				//remember that we include padding at both ends of filter size for intermediate products.
				vertical[i + TIME_PAD][j + FREQ_PAD] = previous[i][j];
				horizontal[i + TIME_PAD][j + FREQ_PAD] = previous[i][j];

			}
		}

		for (dint e = 0; e < 3; e++) {

			//do first dimension first

			for (dint i = 0; i < next.size() + TIME_PAD * 2; i++) {//iterating over time
				//each iteration, iterate through the working area + the padding area.
				//start at zero, because our infill starts at 3, and therefore the padding area includes the area before.
				// restrict by NBINS_last because too much would be overkill.
				//at most this is the entire array, at the least, this is the padding and the filling.

				frequencywise_storage.fill({ 0.0 }); //clear the working memory, because
				//we only want to convolve up to frequencies at a time, we dont overlap

				for (dint j = 0; j < next[0].size() + FREQ_PAD * 2; j++) {
					//infill our temporary memory with the persistent padding and the data
					frequencywise_storage[j] = vertical[i][j];
				}
				convolve_same_frequency(frequencywise_storage);
				for (dint j = 0; j < next[0].size() + FREQ_PAD * 2; j++) {
					//infill our temporary memory with the persistent padding and the data
					vertical[i][j] = frequencywise_storage[j] / static_cast<dfloat>(3.0);
				}
			}
			for (dint i = 0; i < NBINS_last + FREQ_PAD * 2; ++i) {

				for (dint j = 0; j < next.size() + TIME_PAD * 2; j++) {
					holder218[j] = horizontal[j][i];

				}
				convolve_same_time(holder218);
				for (dint j = 0; j < next.size() + TIME_PAD * 2; j++) {
					horizontal[j][i] = holder218[j] / static_cast<dfloat>(13.0);

				}
			}


			for (dint i = 0; i < next.size() + TIME_PAD * 2; i++) {
				for (dint j = 0; j < next[0].size() + FREQ_PAD * 2; j++) {
					//apply the mask, conserving the padding
					vertical[i][j] = (vertical[i][j] + horizontal[i][j]) / static_cast<dfloat>(2.0);
					horizontal[i][j] = vertical[i][j];

				}
			}

		}

		for (dint i = 0; i < next.size(); i++) {
			for (dint j = 0; j < 257; j++) {
				//apply the smoothing, slicing out of our array
				next[i][j] = vertical[i + TIME_PAD][j + FREQ_PAD];

			}
		}
	}

	inline void smooth_and_mask() {

		previous.fill({ static_cast<dfloat>(0.0) });//because of convolve2d

		sawtooth_convolve(stft_real, smoothed);


		// Transpose data into scratch
		man_2d(smoothed, man_global);
		atd_2d(smoothed,man_global, atd_global);

		fast_peaks(smoothed, previous);

		for (dint i = 0; i < previous.size(); i++) {
			for (dint j = 0; j < NBINS_last; j++) {
				if (previous[i][j] == static_cast<dfloat>(0.0)) {
					stft_real[i][j] = static_cast<dfloat>(0.0);
				}
			}
		}

		find_max(stft_real, multiplier);
		multiplier = multiplier / initial;
		if (multiplier > static_cast<dfloat>(1.0)) {
			multiplier = static_cast<dfloat>(1.0);
		}

		man_2d(stft_real, man_global);
		atd_2d(stft_real, man_global, atd_global);
		sawtooth_convolve(stft_real, smoothed);


		fast_peaks(smoothed, smoothed);

		for (dint i = 0; i < previous.size(); i++) {
			for (dint j = 0; j < NBINS_last; j++) {
				initial = smoothed[i][j] * multiplier;
				if (previous[i][j] > initial) {
					previous[i][j] = initial;
				}
			}
		}

		sawtooth_convolve(previous, previous);
		convolve_2d(previous, previous);

	}

public:
	/// <summary>
	/// Sets the value of the temporary placeholder for the Constant
	/// </summary>
	/// <param name="val"></param>
	void setConstant(dfloat val) {
		if (val < 0.001) {
			CONST_1 = 0.001;
		}
		else if (val > 0.999) {
			CONST_1 = 0.999;
		}
		else {
			CONST_1 = val;
		}
	};
	void set_Mult(dfloat val) {
		if (val < 0.001) {
			mult_1 = 0.001;
		}
		else if (val > 0.999) {
			mult_1 = 0.999;
		}
		else {
			mult_1 = val;
		}
	};

	void set_Silent(bool val) {
		silence_1 = val;
	};

	/// <summary>
	/// sets the value of the temporary placeholder for the number of bins to consider
	/// </summary>
	/// <param name="val"></param>
	inline void set_NBINS(dint val) {
		if (val > 4) {
			if (val < 257) {
				NBINS_1 = val;
			}
			else {
				NBINS_1 = 257;
			}
		}
		else { // if it's less than 0
			NBINS_1 = 4;
		}
	};

	inline void set_NBINSHZ(dint val) {
		float hz = float(val) + 93.75f;
		int b = static_cast<int>(std::round(hz / 93.75));
		set_NBINS(b);
	};

	inline void set_SILENCE(bool val) {
		silence_1 = val;
	};


	inline void getEntropy(std::array<dfloat, 64>& input) {
		for (int i = 0; i < 64; i++) {
			input[i] = entropy_smoothed[i + 63] / MAXIMUM_3;
		}
	};
	inline void getResult(dint& val) {
		val = result;
	};

	void process(std::array<dfloat, 8192>& input)
	{
		CONST_last = CONST_1;
		silence = silence_1;
		mult = mult_1;
		result = 0;
		stft_output.fill({ 0.0 });
		stft_complex.fill({ 0.0 });
		audio_padded.fill({ 0.0 });

		if (NBINS_1 != NBINS_last) {//same thing for nbins- only considered once per cycle
			if (NBINS_1 > 257) { NBINS_1 = 257; }//make sure sane inputs
			if (NBINS_1 < 1) {

				NBINS_1 = 4;
			}
			NBINS_last = NBINS_1;
			generate_true_logistic();
			generate_true_logistic_3();
			determine_entropy_maximum();
			determine_entropy_maximum_3();
			smoothed.fill({ static_cast<dfloat>(0.0) });//because the number of bins changes

		}





		// Shift data to the left by one section
		for (dint i = 0; i < SECTION_SIZE * (TOTAL_SECTIONS - 1); i++) {
			audio[i] = audio[i + SECTION_SIZE];
		}

		// Copy in the new audio data
		for (dint i = 0; i < SECTION_SIZE; i++) {
			audio[SECTION_SIZE * 2 + i] = input[i];
		}
		input.fill({ 0.0 });



		stft(audio, logistic_window, stft_complex);
		// Copy the first nbins frequencies of stft_complex to stft_real
		for (dint i = 0; i < 192; i++) {
			for (dint j = 0; j < NBINS_last; j++) {
				stft_real[i][j] = std::abs(stft_complex[i][j]);
			}
		}

		process_entropy();

		if (flag == 2 || silence == false) {
			//threshold(stft_real, t);
			find_max(stft_real, initial);

			smooth_and_mask();
			stft(audio, hann_window, stft_complex);
			if (silence == false) {

				for (dint i = 0; i < 192; i++) {
					for (dint j = 0; j < NBINS_last; j++) {
						stft_real[i][j] = std::abs(stft_complex[i][j]);
					}
				}
				find_min(stft_real, min_);
				find_max(stft_real, max_);
				man_2d(stft_real, man_global);
				atd_2d(stft_real, man_global, atd_global);

				man_global = (man_global - min_) / (max_ - min_);
				atd_global = (atd_global - min_) / (max_ - min_);

				for (dint i = 0; i < stft_output.size(); i++) {
					for (dint j = 0; j < NBINS_last; j++) {
						//apply the mask
						if (entropy_thresholded[i] == 0){
							t = man_global * (entropy_smoothed[i + 63] / MAXIMUM_3) + (atd_global * mult);
							t = max(t, previous[i + 63][j]);
						}
						else{
						t = previous[i + 63][j];
						}

						stft_output[i][j] = stft_complex[i + 63][j] * t;
					}
				}
			}
			else {
				for (dint i = 0; i < stft_output.size(); i++) {
					for (dint j = 0; j < NBINS_last; j++) {

						stft_output[i][j] = stft_complex[i + 63][j] * previous[i + 63][j];
					}
				}

			}


			result = 2;
			flag = 1; //update the flag because we are good to go
			istft(stft_output, synthesis_window, input);
			return;
		}
		if (silence == true) {
			if (flag == 1) {
				result = 1;
				flag = 0; //update the flag since we processed zeros
				istft(stft_zeros, synthesis_window, input);
				return;

			}
			return;
		}
		return;
	}

};
